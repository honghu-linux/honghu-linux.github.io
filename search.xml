<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>快速在Windows搭建tf和pytorch深度学习环境</title>
      <link href="/2020/10/09/%E5%BF%AB%E9%80%9F%E5%9C%A8Windows%E6%90%AD%E5%BB%BAtf%E5%92%8Cpytorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/10/09/%E5%BF%AB%E9%80%9F%E5%9C%A8Windows%E6%90%AD%E5%BB%BAtf%E5%92%8Cpytorch%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="不想看文章，看这里"><a href="#不想看文章，看这里" class="headerlink" title="不想看文章，看这里"></a>不想看文章，看这里</h1><p>截至2020年十月，该命令没有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.1 -c pytorch</span><br><span class="line">conda install -c anaconda cudnn</span><br><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前网上的方法都比较复杂，在看了pytorch和tensorflow的安装文档并踩了很多的坑之后，本人找到了一种全新的方法快速安装环境</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote><p>在开始之前，你应该先安装好anconda环境</p></blockquote><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>首先到官网查看pytorch的版本</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20201009121643.png"></p><p>再到tf官网查看版本要求</p><p>这里有很多可以修改的选项，前四项按照截图选择，最后一项cuda版本需要注意。</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20201009122342.png"></p><p>我们需要同时安装两个环境，因此目前只能选择cuda10.1版本</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此时请复制pytorch(cuda10.1)的安装命令并完成安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit=10.1 -c pytorch</span><br></pre></td></tr></table></figure><p>接下来是配置tf，输入以下命令可以安装cudnn</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c anaconda cudnn</span><br></pre></td></tr></table></figure><p>此时你不需要关心版本问题，conda会为你安装好正确的版本。如果该命令运行时间过长则需要注意是否不存在该cuda版本对应的cudnn版本</p><p>在这之后你就可以使用pip安装tensorflow了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习记录-做题记录1</title>
      <link href="/2020/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/"/>
      <url>/2020/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<h1 id="缺失数字"><a href="#缺失数字" class="headerlink" title="缺失数字"></a>缺失数字</h1><p>给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [3,0,1]</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [9,6,4,2,3,5,7,0,1]</span><br><span class="line">输出: 8</span><br></pre></td></tr></table></figure><p>这道题很简单，但是解答方法很灵活</p><p><a href="https://leetcode-cn.com/problems/missing-number/" target="_blank" rel="noopener">题目</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用下标找出缺失的数字，需要两次遍历</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">list</span>(nums.<span class="built_in">size</span>()+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>[nums[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span> ; i &lt; <span class="built_in">list</span>.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最初我想到的方法是这样的，但是它的效果不是很理想，查看评论区发现有更好的方案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> res = <span class="built_in">size</span> * (<span class="built_in">size</span> - <span class="number">1</span>) / <span class="number">2</span>; </span><br><span class="line">        <span class="comment">// 只有一个数字不存在，并且除了这个数以外都是连续的，只需要数列求和减去已有的即可</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() ; i++)</span><br><span class="line">&#123;</span><br><span class="line">res -= nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h1><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/group-anagrams/" target="_blank" rel="noopener">题目</a></p><p>最开始我想直接使用字符串总的ascii码作为判断是否由相同字母组成，但是对于一部分具有相同ascii码的字符串行不通，只好使用经过一定排列后的字符串作为区分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; groupAnagrams(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; index;  <span class="comment">// 哈希表，提高查找速度</span></span><br><span class="line"><span class="keyword">int</span> rel = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> sorted;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">sorted = strs[i];</span><br><span class="line">sort(sorted.<span class="built_in">begin</span>(), sorted.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span> (index.<span class="built_in">find</span>(sorted) == index.<span class="built_in">end</span>()) &#123;</span><br><span class="line">index[sorted] = rel;</span><br><span class="line">res.push_back(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;());</span><br><span class="line">rel++;</span><br><span class="line">&#125;</span><br><span class="line">res[index[sorted]].push_back(strs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="金字塔转换矩阵"><a href="#金字塔转换矩阵" class="headerlink" title="金字塔转换矩阵"></a>金字塔转换矩阵</h1><p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示。</p><p>使用三元组表示金字塔的堆砌规则如下：</p><p>对于三元组(A, B, C) ，“C”为顶层方块，方块“A”、“B”分别作为方块“C”下一层的的左、右子块。当且仅当(A, B, C)是被允许的三元组，我们才可以将其堆砌上。</p><p>初始时，给定金字塔的基层 bottom，用一个字符串表示。一个允许的三元组列表 allowed，每个三元组用一个长度为 3 的字符串表示。</p><p>如果可以由基层一直堆到塔尖就返回 true ，否则返回 false 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：bottom = &quot;BCD&quot;, allowed = [&quot;BCG&quot;, &quot;CDE&quot;, &quot;GEA&quot;, &quot;FFF&quot;]</span><br><span class="line">输出：true</span><br><span class="line">解析：</span><br><span class="line">可以堆砌成这样的金字塔:</span><br><span class="line">    A</span><br><span class="line">   / \</span><br><span class="line">  G   E</span><br><span class="line"> / \ / \</span><br><span class="line">B   C   D</span><br><span class="line"></span><br><span class="line">因为符合(&apos;B&apos;, &apos;C&apos;, &apos;G&apos;), (&apos;C&apos;, &apos;D&apos;, &apos;E&apos;) 和 (&apos;G&apos;, &apos;E&apos;, &apos;A&apos;) 三种规则。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/pyramid-transition-matrix" target="_blank" rel="noopener">题目</a></p><p>这题我想了好久啊，我还以为是个二叉树的问题。。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt; <span class="built_in">map</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; allowed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; allowed.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[allowed[i].substr(<span class="number">0</span>, <span class="number">2</span>)].push_back(allowed[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">pyramidTransition</span><span class="params">(<span class="built_in">string</span> bottom, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; allowed)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;init(allowed);</span><br><span class="line"><span class="keyword">return</span> loop(bottom, <span class="string">""</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">loop</span><span class="params">(<span class="built_in">string</span> bottom, <span class="built_in">string</span> layer, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> length = layer.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bottom.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="comment">// 到达顶部</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (length == bottom.<span class="built_in">size</span>() - <span class="number">1</span>) &#123; <span class="comment">//成功</span></span><br><span class="line"><span class="keyword">return</span> loop(layer, <span class="string">""</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count == length - <span class="number">1</span>) &#123;  <span class="comment">// 超过尝试次数</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> key = bottom.substr(count, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>.<span class="built_in">find</span>(key) == <span class="built_in">map</span>.<span class="built_in">end</span>()) <span class="comment">// key不存在</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = <span class="built_in">map</span>[key].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (loop(bottom, layer + <span class="built_in">map</span>[key][i], count + <span class="number">1</span>)) &#123;  <span class="comment">// 尝试深度+1 最底层有四个时只能最多尝试三次</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="被围绕的区域"><a href="#被围绕的区域" class="headerlink" title="被围绕的区域"></a>被围绕的区域</h1><p>给定一个二维的矩阵，包含 ‘X’ 和 ‘O’（字母 O）。</p><p>找到所有被 ‘X’ 围绕的区域，并将这些区域里所有的 ‘O’ 用 ‘X’ 填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">X X X X</span><br><span class="line">X O O X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br><span class="line">运行你的函数后，矩阵变为：</span><br><span class="line"></span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/surrounded-regions" target="_blank" rel="noopener">题目</a></p><p>这道题目很简单，只需要搜索即可获得不错的效果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; keepX, keepY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (board.empty()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历第一行和最后一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j++)</span><br><span class="line">&#123;</span><br><span class="line">findKeepPostiton(keepX, keepY, board, <span class="number">0</span>, j);</span><br><span class="line">findKeepPostiton(keepX, keepY, board, board.<span class="built_in">size</span>() - <span class="number">1</span>, j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历侧边两行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">findKeepPostiton(keepX, keepY, board, i, <span class="number">0</span>);</span><br><span class="line">findKeepPostiton(keepX, keepY, board, i, board[<span class="number">0</span>].<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].<span class="built_in">size</span>(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">board[i][j] = <span class="string">'X'</span>;  <span class="comment">// 将所有位置填充</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; keepX.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">board[keepX[i]][keepY[i]] = <span class="string">'O'</span>;   <span class="comment">// 还原之前的O</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findKeepPostiton</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; x, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; y, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; board, <span class="keyword">int</span> thisx, <span class="keyword">int</span> thisy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (thisx &gt;= board.<span class="built_in">size</span>() || thisx &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (thisy &gt;= board[<span class="number">0</span>].<span class="built_in">size</span>() || thisy &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (board[thisx][thisy] == <span class="string">'O'</span>) &#123;</span><br><span class="line">board[thisx][thisy] = <span class="string">'X'</span>;</span><br><span class="line">x.push_back(thisx);</span><br><span class="line">y.push_back(thisy);</span><br><span class="line">findKeepPostiton(x, y, board, thisx + <span class="number">1</span>, thisy);</span><br><span class="line">findKeepPostiton(x, y, board, thisx - <span class="number">1</span>, thisy);</span><br><span class="line">findKeepPostiton(x, y, board, thisx, thisy + <span class="number">1</span>);</span><br><span class="line">findKeepPostiton(x, y, board, thisx, thisy - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="最小路径和"><a href="#最小路径和" class="headerlink" title="最小路径和"></a>最小路径和</h1><p>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>说明：每次只能向下或者向右移动一步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">题目</a></p><p>这道题刚开始我准备使用搜索，但是这是不行的，会超出时间限制，只好使用动态规划的方法来解决</p><p>基本思路是遍历，然后将每一个位置填充为到达这个位置的最近距离（在从右和从下之间选择），由于左侧和上侧比较特殊，先计算沿着左侧和上侧走的距离</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxX = grid.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">int</span> maxY = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// 横向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; maxY; i++)</span><br><span class="line">&#123;</span><br><span class="line">grid[<span class="number">0</span>][i] = grid[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];  <span class="comment">// 将上一步的值加到下一步上，这样每一块的值就代表到达这块位置的路径长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 纵向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; maxX; i++)</span><br><span class="line">&#123;</span><br><span class="line">grid[i][<span class="number">0</span>] = grid[i - <span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];  <span class="comment">// 同理</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历中间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; maxX; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">1</span>; j &lt; maxY; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = grid[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">int</span> b = grid[i][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123;   <span class="comment">// 在从左走和从右走之间选择最少的那一条路径</span></span><br><span class="line">grid[i][j] = grid[i][j] + a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">grid[i][j] = grid[i][j] + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> grid[maxX - <span class="number">1</span>][maxY - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习记录-bfs</title>
      <link href="/2020/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-bfs/"/>
      <url>/2020/08/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-bfs/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">题目地址</a></p><p>这题其实并不难，但是我第一次提交的代码只超过了20%的人</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; nodeQueue;  <span class="comment">// 这个队列存放了每一层的节点，按照从左到右的顺序</span></span><br><span class="line">        TreeNode* node;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        nodeQueue.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.empty()) <span class="comment">// 从这里开始取出每一层的节点进行操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            result.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());   <span class="comment">// 添加新的一层</span></span><br><span class="line">            <span class="keyword">int</span> itemSize = nodeQueue.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; itemSize; i++)  <span class="comment">// 将该层所有的节点取出</span></span><br><span class="line">            &#123;</span><br><span class="line">                node = nodeQueue.front();</span><br><span class="line">                result.back().push_back(node-&gt;val);</span><br><span class="line">                nodeQueue.pop();</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) &#123;</span><br><span class="line">                    </span><br><span class="line">                    nodeQueue.push(node-&gt;left);</span><br><span class="line">            </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) &#123;</span><br><span class="line">                </span><br><span class="line">                    nodeQueue.push(node-&gt;right);</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h1><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">[&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;1&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;1&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;]</span><br><span class="line">]</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;1&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;0&apos;,&apos;0&apos;,&apos;1&apos;,&apos;0&apos;,&apos;0&apos;],</span><br><span class="line">[&apos;0&apos;,&apos;0&apos;,&apos;0&apos;,&apos;1&apos;,&apos;1&apos;]</span><br><span class="line">]</span><br><span class="line">输出: 3</span><br><span class="line">解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</span><br></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">题目</a></p><p>以下是我的解法，比较简陋，速度也不是很快，仅仅是使用搜索而已</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">visit(grid, i, j);</span><br><span class="line">res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= grid.<span class="built_in">size</span>() || i &lt; <span class="number">0</span>)  <span class="comment">// 越界判断</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= grid[i].<span class="built_in">size</span>() || j &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">grid[i][j] = <span class="number">0</span>;</span><br><span class="line">visit(grid, i + <span class="number">1</span>, j);  <span class="comment">// 搜索附近</span></span><br><span class="line">visit(grid, i - <span class="number">1</span>, j);</span><br><span class="line">visit(grid, i, j + <span class="number">1</span>);</span><br><span class="line">visit(grid, i, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习记录-dfs</title>
      <link href="/2020/08/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-dfs/"/>
      <url>/2020/08/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-dfs/</url>
      
        <content type="html"><![CDATA[<h1 id="N叉树的最大深度"><a href="#N叉树的最大深度" class="headerlink" title="N叉树的最大深度"></a>N叉树的最大深度</h1><p>给定一个 N 叉树，找到其最大深度。</p><p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p><p>输入<code>[1,null,3,2,4,null,5,6]</code></p><p>输出<code>3</code></p><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">地址</a></p><p>这道题很简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">            loop(root,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> depth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">(Node* root, <span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="literal">nullptr</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;children.<span class="built_in">size</span>() != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> i = root-&gt;children.<span class="built_in">begin</span>(); i != root-&gt;children.<span class="built_in">end</span>(); ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    loop(*i,depth+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (depth &gt; <span class="keyword">this</span>-&gt;depth)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;depth = depth;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上是我的解法，但是运行速度并不是十分理想，应该还有更好的解题方案</p><h1 id="统计二叉树中好节点的数目"><a href="#统计二叉树中好节点的数目" class="headerlink" title="统计二叉树中好节点的数目"></a>统计二叉树中好节点的数目</h1><p>给你一棵根为 root 的二叉树，请你返回二叉树中好节点的数目。</p><p>「好节点」X 定义为：从根到该节点 X 所经过的节点中，没有任何节点的值大于 X 的值。</p><p>输入：root = [3,1,4,3,null,1,5]<br>输出：4<br>解释：图中蓝色节点为好节点。<br>根节点 (3) 永远是个好节点。<br>节点 4 -&gt; (3,4) 是路径中的最大值。<br>节点 5 -&gt; (3,4,5) 是路径中的最大值。<br>节点 3 -&gt; (3,1,3) 是路径中的最大值。</p><p>输入：root = [3,3,null,4,2]<br>输出：3<br>解释：节点 2 -&gt; (3, 3, 2) 不是好节点，因为 “3” 比它大。</p><p><a href="https://leetcode-cn.com/problems/count-good-nodes-in-binary-tree/" target="_blank" rel="noopener">链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">goodNodes</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">            visit(root, root-&gt;val);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(TreeNode* node, <span class="keyword">int</span> <span class="built_in">max</span>)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;val &gt;= <span class="built_in">max</span>) &#123;</span><br><span class="line">                visit(node-&gt;left, node-&gt;val);</span><br><span class="line">                visit(node-&gt;right, node-&gt;val);</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visit(node-&gt;left, <span class="built_in">max</span>);</span><br><span class="line">            visit(node-&gt;right, <span class="built_in">max</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习记录-二叉树</title>
      <link href="/2020/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/07/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="线索二叉树的遍历和线索化"><a href="#线索二叉树的遍历和线索化" class="headerlink" title="线索二叉树的遍历和线索化"></a>线索二叉树的遍历和线索化</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    Link,  <span class="comment">// 正常指向下一个节点</span></span><br><span class="line">    Thread  <span class="comment">// 指向线索节点</span></span><br><span class="line">&#125; Tag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ltag;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> rtag;</span><br><span class="line">&#125; TNode;</span><br><span class="line"></span><br><span class="line">TNode *pre = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">TNode *<span class="title">createNode</span><span class="params">(<span class="keyword">char</span> data, TNode *lchild, TNode *rchild)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TNode *node = (TNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;lchild = lchild;</span><br><span class="line">    node-&gt;rchild = rchild;</span><br><span class="line">    node-&gt;ltag = Link;</span><br><span class="line">    node-&gt;rtag = Link;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inThreading</span><span class="params">(TNode *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree)</span><br><span class="line">    &#123;</span><br><span class="line">        inThreading(tree-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span> (!tree-&gt;lchild) <span class="comment">// 没有左孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            tree-&gt;ltag = Thread;</span><br><span class="line">            tree-&gt;lchild = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pre-&gt;rchild)  <span class="comment">// 上一个节点没有右孩子</span></span><br><span class="line">        &#123;</span><br><span class="line">            pre-&gt;rtag = Thread;</span><br><span class="line">            pre-&gt;rchild = tree;   <span class="comment">// 此时pre节点是当前节点的child，所以pre的rchild可以连接到他的父节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        pre = tree;  <span class="comment">// 在处理完之后才设置pre可以确保rchild的正确指向</span></span><br><span class="line">        inThreading(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderThreading</span><span class="params">(TNode *tree, TNode *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;ltag = Link;</span><br><span class="line">    head-&gt;lchild = tree;  <span class="comment">// 头节点的lchild指向根节点</span></span><br><span class="line">    <span class="keyword">if</span> (!tree)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = tree;</span><br><span class="line">    inThreading(tree);</span><br><span class="line">    pre-&gt;rchild = head;  <span class="comment">// 树的中序遍历最后一个节点指向头节点</span></span><br><span class="line">    pre-&gt;rtag = Thread;</span><br><span class="line">    head-&gt;rchild = pre; <span class="comment">// 头节点的rchild指向中序遍历最后一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(TNode *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TNode *n = head-&gt;lchild; <span class="comment">// 找到根节点</span></span><br><span class="line">    <span class="keyword">while</span> (n != head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (n-&gt;ltag == Link)</span><br><span class="line">        &#123;</span><br><span class="line">            n = n-&gt;lchild;   <span class="comment">// 先找到最左边的节点（开始遍历）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c "</span>, n-&gt;data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n-&gt;rtag == Thread &amp;&amp; n-&gt;rchild != head) <span class="comment">// 沿着线索找到每一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            n = n-&gt;rchild;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, n-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        n = n-&gt;rchild; <span class="comment">// 从节点的右子树开始遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TNode *tree = createNode(<span class="string">'1'</span>,</span><br><span class="line">                             createNode(<span class="string">'2'</span>, createNode(<span class="string">'4'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>), createNode(<span class="string">'5'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)),</span><br><span class="line">                             createNode(<span class="string">'3'</span>, createNode(<span class="string">'6'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>), createNode(<span class="string">'7'</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>)));</span><br><span class="line">    TNode head;</span><br><span class="line">    InOrderThreading(tree, &amp;head);</span><br><span class="line">    InOrderTraverse(&amp;head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法学习记录-链表</title>
      <link href="/2020/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/07/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="拉丁方阵问题"><a href="#拉丁方阵问题" class="headerlink" title="拉丁方阵问题"></a>拉丁方阵问题</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">createLinkedList</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *last, *<span class="keyword">this</span>, *head;</span><br><span class="line">    head = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    last = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;data = i;</span><br><span class="line">        last-&gt;next = <span class="keyword">this</span>;</span><br><span class="line">        last = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Node *head, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; a++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;data);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *linkedlist = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);  <span class="comment">//输入n</span></span><br><span class="line">    linkedlist = createLinkedList(n);</span><br><span class="line">    solve(linkedlist, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找链表中间元素"><a href="#查找链表中间元素" class="headerlink" title="查找链表中间元素"></a>查找链表中间元素</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">createLinkedList</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *last, *<span class="keyword">this</span>, *head;</span><br><span class="line">    head = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    last = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;data = i;</span><br><span class="line">        last-&gt;next = <span class="keyword">this</span>;</span><br><span class="line">        last = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(Node *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//快的指针移动速度是慢的的两倍，当快指针移动到末尾则慢指针刚好到达中间</span></span><br><span class="line">    Node *slow = head ,*fast = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">if</span> (fast == <span class="literal">NULL</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> slow-&gt;data;</span><br><span class="line">       &#125;</span><br><span class="line">       slow = slow-&gt;next;</span><br><span class="line">       fast = fast-&gt;next;</span><br><span class="line">       <span class="keyword">if</span> (fast != <span class="literal">NULL</span>)&#123;</span><br><span class="line">           fast = fast-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *linkedlist = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    linkedlist = createLinkedList(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,solve(linkedlist));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">createLinkedList</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *last, *<span class="keyword">this</span>, *head;</span><br><span class="line">    head = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    head-&gt;data = <span class="number">0</span>;</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    last = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;data = <span class="number">0</span>;</span><br><span class="line">        last-&gt;next = <span class="keyword">this</span>;</span><br><span class="line">        last = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(Node *head, <span class="keyword">int</span> n,<span class="keyword">int</span> skip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; skip; a++)</span><br><span class="line">        &#123;</span><br><span class="line">           p = p-&gt;next;  </span><br><span class="line">           <span class="keyword">if</span> (p-&gt;data != <span class="number">0</span>) <span class="comment">//如果这里的人已经死了那么就必须重新找下一个</span></span><br><span class="line">           &#123;</span><br><span class="line">               a--; </span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data = count;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    Node *p = head;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (p == head)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *linkedlist = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    linkedlist = createLinkedList(n);</span><br><span class="line">    solve(linkedlist, n,<span class="number">3</span>);</span><br><span class="line">    show(linkedlist);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派的GPIO，蓝牙，摄像头等基本配置</title>
      <link href="/2020/07/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84GPIO%EF%BC%8C%E8%93%9D%E7%89%99%EF%BC%8C%E6%91%84%E5%83%8F%E5%A4%B4%E7%AD%89%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84GPIO%EF%BC%8C%E8%93%9D%E7%89%99%EF%BC%8C%E6%91%84%E5%83%8F%E5%A4%B4%E7%AD%89%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="访问树莓派"><a href="#访问树莓派" class="headerlink" title="访问树莓派"></a>访问树莓派</h1><h2 id="打开ssh服务"><a href="#打开ssh服务" class="headerlink" title="打开ssh服务"></a>打开ssh服务</h2><p>将SD卡连接到电脑上并打开，直接新建“SSH”文件（无后缀）即可</p><h2 id="配置热点"><a href="#配置热点" class="headerlink" title="配置热点"></a>配置热点</h2><p>先把树莓派连接至你的服务器，按照下面的方式配置热点以便于在任何时候连接到树莓派进行调试</p><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>输入以下命令来完成创建ap所需要的软件的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hostapd git</span><br><span class="line">sudo apt install dnsmasq</span><br><span class="line">git clone https://github.com/oblique/create_ap</span><br><span class="line">cd create_ap</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编辑<code>/etc/create_ap.conf</code>，在里面修改你的ap名称和密码，以及其他配置</p><p>使用以下命令启动ap并设置为开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start create_ap</span><br><span class="line">sudo systemctl enable create_ap</span><br></pre></td></tr></table></figure><p>连接到ap，使用上面配置文件中的<code>GATEWAY</code>地址通过ssh连接到树莓派</p><h1 id="GPIO的配置"><a href="#GPIO的配置" class="headerlink" title="GPIO的配置"></a>GPIO的配置</h1><p>除一般的gpio配置外，有时候我们还需要配置远程访问gpio来便于我们从计算机调试GPIO应用</p><p>首先安装<code>gpiozero</code>，这是一个用户友好的python GPIO库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-gpiozero</span><br></pre></td></tr></table></figure><p>安装后，输入<code>pinout</code>可以查看引角图</p><p>如果需要远程GPIO，你需要按照以下配置</p><p>输入以下命令安装GPIO服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install pigpio</span><br><span class="line">sudo systemctl enable pigpiod</span><br><span class="line">sudo systemctl start pigpiod</span><br></pre></td></tr></table></figure><p>之后就可以使用以下方式在你的电脑运行GPIO程序在树莓派看到结果了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PIGPIO_ADDR=地址 python3 hello.py</span><br></pre></td></tr></table></figure><p>当然，首先要安装依赖<code>pip install gpiozero pigpio</code></p><h1 id="摄像头的配置"><a href="#摄像头的配置" class="headerlink" title="摄像头的配置"></a>摄像头的配置</h1><p>这个很简单，使用<code>raspi-config</code>即可快速配置。需要注意的是使用摄像头时显存不宜分配过低。</p><p>如需在计算机运行opencv你可以使用下面的命令来推送视频流到opencv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raspivid -t 0 -w 1280 -h 720 -fps 40 -l -o tcp://0.0.0.0:5000</span><br></pre></td></tr></table></figure><p>python的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"></span><br><span class="line">cap = cv.VideoCapture(<span class="string">"tcp://10.0.0.1:5000"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cap.isOpened():</span><br><span class="line">    print(<span class="string">"not open"</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    cv.imshow(<span class="string">"video"</span>,frame)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="在树莓派使用opencv"><a href="#在树莓派使用opencv" class="headerlink" title="在树莓派使用opencv"></a>在树莓派使用opencv</h2><p>需要注意的是，使用pip安装的opencv多半无法在树莓派正常工作，比较好的方式是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-opencv</span><br></pre></td></tr></table></figure><p>这样可以同时吧opencv所需要的各种库也安装好，真正开箱即用</p><p>如果找不到<code>/dev/video0</code>的话，在<code>/etc/modules</code>最后加上<code>bcm2835-v4l2</code>保存重启即可</p><h1 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h1><p>蓝牙spp的配置略复杂，请看<a href="https://blog.csdn.net/wanyeye/article/details/52909869" target="_blank" rel="noopener">这里</a></p><p>但是这篇文章有点问题，如果遇到<code>bluetooth</code>服务启动错误，按照以下方式修改启动参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/bluetooth/bluetoothd -C --noplugin=sap</span><br></pre></td></tr></table></figure><p>之后就可以正常使用蓝牙spp了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install picocom</span><br><span class="line"></span><br><span class="line">picocom /dev/rfcomm0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLion+openocd+stm32cubemx和stlink配置嵌入式开发环境</title>
      <link href="/2020/06/16/clion-openocd-stm32cubemx%E5%92%8Cstlink%E9%85%8D%E7%BD%AE%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/06/16/clion-openocd-stm32cubemx%E5%92%8Cstlink%E9%85%8D%E7%BD%AE%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>用CLion当然是因为Keil太难用啦(。・∀・)ノ</p><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><p>你需要安装以下软件</p><ul><li>clion</li><li>stm32cubemx</li><li>openocd</li><li>arm-none-eabi-gcc(需要配置环境变量)</li><li>mingw（我也不确定需不需要这个，装一个吧）</li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="创建Clion项目"><a href="#创建Clion项目" class="headerlink" title="创建Clion项目"></a>创建Clion项目</h2><p>以stm32f103zet6作为例子创建一个闪烁led的项目</p><p>选择这个来创建STM32项目，设置好路径后等待加载</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616211922.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212029.png"></p><p>点击这里的蓝色字来打开stm32cubemx完成进一步配置</p><h2 id="使用stm32cubemx生成代码"><a href="#使用stm32cubemx生成代码" class="headerlink" title="使用stm32cubemx生成代码"></a>使用stm32cubemx生成代码</h2><p>点击这里切换你的芯片</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212325.png"></p><p>切换标签后按照需要配置GPIO</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212556.png"></p><p><strong>下面是很关键的一步，配置debug</strong></p><p>如果你使用SW连接到开发板，必须按照以下方式配置，否则无法下载程序</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212649.png"></p><p>到达下一步修改项目设置</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212925.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616212949.png"></p><p>在另一个菜单中更改这里的设置</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616213036.png"></p><p>完成之后点击生成代码，选择yes覆盖原项目</p><h2 id="openocd开发板配置"><a href="#openocd开发板配置" class="headerlink" title="openocd开发板配置"></a>openocd开发板配置</h2><p>这部分其实我也不是很懂如何操作。。。。但是我的配置能用。。。</p><p>选择一个开发板预设并复制到项目中，我们将在这个预设的基础上进行修改</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616213641.png"></p><p>打开复制的开发板配置文件，进行以下修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># STM320518-EVAL: This is an STM32F0 eval board with a single STM32F051R8T6</span><br><span class="line"># (64KB) chip.</span><br><span class="line"># http://www.st.com/internet/evalboard/product/252994.jsp</span><br><span class="line">#</span><br><span class="line"># This is for using the onboard STLINK/V2</span><br><span class="line"></span><br><span class="line">source [find interface/stlink.cfg]</span><br><span class="line"></span><br><span class="line">transport select hla_swd</span><br><span class="line"></span><br><span class="line"># 内存大小 这里我的是64kb，就是10000</span><br><span class="line">set WORKAREASIZE 0x10000</span><br><span class="line"></span><br><span class="line"># chip name 改为STM32F103ZET6</span><br><span class="line">set CHIPNAME STM32F103ZET6</span><br><span class="line"></span><br><span class="line"># 改为stm32f1x</span><br><span class="line">source [find target/stm32f1x.cfg]</span><br><span class="line"># 删掉这一行，否则无法复位开发板</span><br><span class="line"># reset_config srst_only</span><br></pre></td></tr></table></figure><p>在main的循环内加入我们的代码，在两条注释中间的代码如果重新使用stm32cubemx生成项目将会保留</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">   HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);</span><br><span class="line">   HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);</span><br><span class="line">   HAL_Delay(<span class="number">200</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h1 id="链接stlink和开发板"><a href="#链接stlink和开发板" class="headerlink" title="链接stlink和开发板"></a>链接stlink和开发板</h1><p>亲测按照以下方式链接可以避免各种问题，接口示意图请自行百度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TVCC（1） --- STM32 3.3V ； 必须连接 ST-LINK根据此调整输出电平</span><br><span class="line"></span><br><span class="line">SWIO（7）---- STM32 JTMS</span><br><span class="line"></span><br><span class="line">SWCLK（9）---- STM32 JTCK</span><br><span class="line"></span><br><span class="line">GND（20）-----STM32 GND</span><br><span class="line"></span><br><span class="line">VDD(19) ----- 3.3V</span><br></pre></td></tr></table></figure><p>这样的连线出问题的概率好像小一些（大概吧）</p><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>使用stlink的sw模式连接到开发板，在clion中直接点击运行即可下载并运行项目</p><p>然后你会得到一个无情的错误</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616214425.png"></p><p>目前我不知道这个问题的解决方案，据我观察下面的方法可能有效</p><ul><li>复位</li><li>先使用串口下载程序</li><li>上电复位后过一段时间再尝试连接</li><li>按照上面的方式连接开发板</li></ul><p>其实这个问题我发现是有几率出现的，一般来说上电复位之后过一小段时间总是能用的</p><p>使用串口下载一遍程序就可以正常使用stlink下载了</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616215249.png"></p><p>如果更改了项目源代码使用同样的方式即可快速下载并运行项目</p><h1 id="调试项目"><a href="#调试项目" class="headerlink" title="调试项目"></a>调试项目</h1><p>这个时候如果你直接按下了debug，你会得到这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Truncated register 16 in remote &apos;g&apos; packet</span><br></pre></td></tr></table></figure><p>这时候你需要修改工具链配置</p><ul><li>打开工具链设置，将默认的mingw复制一份</li><li>将debugger改为arm-none-eabi-gcc的gdb</li><li>将复制后的工具链配置移到顶部</li></ul><p>完成之后应该是这样的（我的路径可能和你的不同）</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616220606.png"></p><p>然后就可以愉快的debug了</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200616220651.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速打造在线软件安装包</title>
      <link href="/2020/04/26/%E5%BF%AB%E9%80%9F%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85/"/>
      <url>/2020/04/26/%E5%BF%AB%E9%80%9F%E6%89%93%E9%80%A0%E5%9C%A8%E7%BA%BF%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们常常需要分发自己编写的软件，但是对于大部分情况来说，为了让用户能够使用我们的软件，用户都需要安装<code>Runtime</code>，我们常用的编程语言(Java,Python,Nodejs)等都需要安装对应的运行环境，他们的运行环境在一般的电脑上不一定安装过，在分发使用此类编程语言的程序时我们通常的做法是附带一份运行环境</p><p>但是这样做就会带来一个问题：众所周知，国内能在浏览器内直接下载文件的网盘少之又少，就算是qq群文件下载也十分慢，这大大影响了用户获取软件的体验</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>快速制作一个小体积的在线软件安装包，该安装包能够快速分发，在安装时将会使用多线程的方式快速下载运行环境完成安装</p><p>本文将以mirai项目的Windows一键安装包为例来举例如何使用WinRAR完成我们的目标</p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>mirai是一个使用jvm的qq机器人项目，要运行他首先需要安装java和javafx</p><p>以下是效果图</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426140711.png"></p><p>点击安装之后将会打开一个cmd窗口，程序将会自动执行运行环境和jar的下载</p><p>自解压文件结构如下</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426140838.png"></p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="第一步：存放我们的文件"><a href="#第一步：存放我们的文件" class="headerlink" title="第一步：存放我们的文件"></a>第一步：存放我们的文件</h2><p>本项目使用coding来存储文件，使用方法很简单</p><ol><li>在coding创建一个仓库</li><li>将仓库设置为公开</li><li>上传文件至仓库</li><li>在文件预览界面点击下载并复制下载连接</li></ol><p>这一步很简单，不贴图了，理论上gitee和GitHub也可以这样使用</p><p><strong>如果提供商有文件大小限制，请创建压缩分卷再上传</strong></p><h2 id="完成下载"><a href="#完成下载" class="headerlink" title="完成下载"></a>完成下载</h2><p>要进行文件下载，虽然我们完全可以编写一个自己的小程序来完成该任务；但是我不认为这是非常快的方法。现成的下载软件很多，我们可以使用aria2快速下载</p><blockquote><p>aria2 is a lightweight multi-protocol &amp; multi-source command-line download utility. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2 can be manipulated via built-in JSON-RPC and XML-RPC interfaces.</p></blockquote><p>这是官网对该软件的介绍，选择它的原因主要有以下几个</p><ol><li>多线程下载</li><li>命令行操作</li><li>轻量，它的Windows版本只需要一个4m左右的exe</li></ol><p>将他集成到我们的在线安装包里并使用他来下载我们的文件是个不错的选择</p><p>你可以使用下面的命令来下载文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">.\aria2c.exe --max-concurrent-downloads=<span class="number">4</span>^</span><br><span class="line"> -U "Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win64; x64) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Chrome/<span class="number">80</span>.<span class="number">0</span>.<span class="number">3987</span>.<span class="number">163</span> Safari/<span class="number">537</span>.<span class="number">36</span>"^</span><br><span class="line"> --input-file=urls.txt</span><br></pre></td></tr></table></figure><p>请将你的链接放到<code>urls.txt</code>里，使用这个bat就可以进行下载</p><h2 id="完成解压"><a href="#完成解压" class="headerlink" title="完成解压"></a>完成解压</h2><p>有了上一步的经验，在解压环节我们可以使用<code>7z</code>来完成</p><p>7z有命令行操作功能，并且只需要<code>7za.dll</code>和<code>7za.exe</code>两个文件即可工作，两个文件大小总和不超过1m，这是我们理想的嵌入解压工具</p><p>使用下面的命令来解压文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>za.exe x 文件名称 -aoa</span><br></pre></td></tr></table></figure><p>其中<code>x</code>表示解压，<code>-aoa</code>表示覆盖文件，如果你的文件是压缩分卷则只需要填写分卷的第一个文件即可正确完成解压</p><p>解压完成后你可以删除剩下的文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> 文件.z*</span><br></pre></td></tr></table></figure><p>这样可以删除全部的zip分卷文件，其他同理</p><h2 id="完成自动安装"><a href="#完成自动安装" class="headerlink" title="完成自动安装"></a>完成自动安装</h2><p>有了安装脚本，下一步要做的就是在自解压完成后自动开始安装</p><p>它十分简单</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426142630.png"></p><p>WinRAR的自解压文件可以将你的压缩包打包为exe格式，你可以在任何位置直接打开它而无需提前安装压缩软件，这对于想把软件安装到服务器的用户十分友好</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426142908.png"></p><p>提取后运行的脚本默认工作目录为解压出的文件位置</p><p>到此，你就创建了一个解压后可以自动完成运行环境下载的自解压文件了</p><h2 id="说明信息的更改"><a href="#说明信息的更改" class="headerlink" title="说明信息的更改"></a>说明信息的更改</h2><blockquote><p>啊，我知道啊，在这里填上信息</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426143056.png"></p></blockquote><p>实际上直接填入显示的文本是不行的，你会发现他的格式全都是乱的。。。。</p><p><strong>原因在于，你需要使用<code>html</code>填写</strong></p><p>既然是快速，那就不写html了，除非你对html十分熟悉</p><p>我们可以使用word来导出html</p><ol><li>打开一个新的word文档</li><li>在里面输入你想要的提示信息</li><li>在另存为里选择html格式<br><br><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200426143519.png"></li><li>使用WinRAR的从文件加载文本加载该html</li></ol><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>到此你就完成了你的在线安装文件，你可以使用预设功能保存WinRAR的设置便于下次使用</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="安装数量统计"><a href="#安装数量统计" class="headerlink" title="安装数量统计"></a>安装数量统计</h2><p>我们可以使用网站访问统计服务来统计安装包安装数量，只需要使用aria2发送计数请求即可</p><p>这里需要注意aria2默认是多线程请求的，要用于计数请设置为单线程</p><p>代码不贴了，很简单</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android逆向初体验-云班课app逆向</title>
      <link href="/2020/02/16/Android%E9%80%86%E5%90%91%E5%88%9D%E4%BD%93%E9%AA%8C-%E4%BA%91%E7%8F%AD%E8%AF%BEapp%E9%80%86%E5%90%91/"/>
      <url>/2020/02/16/Android%E9%80%86%E5%90%91%E5%88%9D%E4%BD%93%E9%AA%8C-%E4%BA%91%E7%8F%AD%E8%AF%BEapp%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>反正就是网课app了，逆向之后可以实现签到什么的</p><p>本文仅为学习用途，请勿使用本文相关信息进行其他活动</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在网上找了一下分析该app的文章，但是只找到一篇2017年的文章，<a href="https://blog.csdn.net/wangke0809/article/details/70171370" target="_blank" rel="noopener">链接</a></p><p>看了文章，发现很多细节的地方并没有说清楚，于是只好自己上手操作</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>首先抓包</p><p>抓https有时候可能需要一个xposed模块让系统信任所有证书</p><p><a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener">JustTrustMe</a></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216170311.png"></p><p>很显然他的登录协议已经发生了改变，在请求头部多出了一个signature，如果不带signature就无法登录，查看了其他数据包之后分析这个参数是客户端生成的</p><p>为了找出这个sign生成的算法只好通过逆向</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="1-大致浏览"><a href="#1-大致浏览" class="headerlink" title="1.大致浏览"></a>1.大致浏览</h2><p>使用jadx打开</p><p>文章中的app并没有加固，但是当我开始分析的时候它已经加固了</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216170734.png"></p><p>加固后的app直接分析看不到任何程序相关的源代码</p><p>查找网上各类资料后最终选择使用xposed来脱壳,插件叫做<a href="https://github.com/WrBug/DeveloperHelper" target="_blank" rel="noopener">易开发</a></p><p>很幸运使用这个模块成功脱壳，按照文章的思路进行搜索，找到了两个函数可能返回签名</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216171043.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216171127.png"></p><p>为了找出登录是使用了哪一个方法，只好搜索登录的url来进一步确认</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216171254.png"></p><p>通过查找该变量的用例找到了构造登录数据包的方法</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216171402.png"></p><p>而这里的b就是构造请求头的方法（同名的函数有很多），点击b就可以跳到对应的方法</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216171621.png"></p><p>可以看到它调用的是只有三个参数的a方法</p><p>方法a主要将a的三个参数拼成一个字符串，在返回处还调用了两个函数</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216172019.png"></p><p>因为jadx不能同时加载多个dex，我尝试将其转换为三个jar再合并也没有成功，最后只能通过搜索在几个dex文件中寻找这个方法</p><p>最后发现d.a是进行HmacSHA1加密的方法</p><p>d.j是一个传入Contex来计算一个值的方法，我没能看懂他的操作（无法成功反编译，只有字节码）</p><p>至于上面的a方法的参数是什么的话，其实就和文章中的一样</p><h2 id="找参数"><a href="#找参数" class="headerlink" title="找参数"></a>找参数</h2><p>其实除了那个计算出来的值，其他参数还是很好找的，根据那些似懂非懂的代码判断这个值只与客户端的一些不变的参数有关，找出这个参数即可实现登录</p><p>为了找出那个参数，最常用的方法可能是直接在该方法处下断点来获取返回值，只好查阅资料来寻找方案</p><p>博主对字节码并不熟悉且大多数壳都有反调试，脱壳后的修复也比较复杂（博主不会逆向），最后决定使用一个并不是十分方便的方法——使用xposed模块直接获取返回值</p><p>编写xposed模块其实也不是很难，有两个坑需要注意，一是hook带壳应用的时候不太一样，二是hook私有方法需要先设置为可访问</p><h1 id="获取签到状态"><a href="#获取签到状态" class="headerlink" title="获取签到状态"></a>获取签到状态</h1><p>这里的就和文章中的一样了，博主顺便也吧获取班级列表的接口看了一下，这样就可实现全部课程的签到</p><p>这里的signature校验算法是参数多一些的那个a方法，并不是登录的算法</p><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>坑。。。。。。</p><p>这个应用的签到服务器居然是另一个，导致我以为获取了签到状态就已经签到成功了</p><p>更坑的是那个手机版免root抓包程序居然没有解密那个包（非443端口），我还以为是什么第三方sdk的包</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200216174413.png"></p><p>最后通过那个域名在代码里找到了逻辑，配合fiddler抓到了那个包成功实现了签到</p><p>最后我要吐槽一下这个应用的签到，发送签到成功的数据里并没有手势信息，他的手势签到是在客户端验证的</p><p><strong>也就是说你甚至可以在不知道手势的情况下直接签到成功</strong></p><p><strong>当然你也可以查看签到信息来得到手势,,,,,,,,</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ机器人开发尝试-实现一个获取疫情信息的机器人</title>
      <link href="/2020/01/26/QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B0%9D%E8%AF%95-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%96%AB%E6%83%85%E4%BF%A1%E6%81%AF%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2020/01/26/QQ%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B0%9D%E8%AF%95-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%96%AB%E6%83%85%E4%BF%A1%E6%81%AF%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>最近全国都在密切关注2019-ncov的最新信息，我群的群友们也是，于是我就开发了这样的一个小程序来帮助大家获取最新信息</p><p>数据来源<a href="https://3g.dxy.cn/newh5/view/pneumonia" target="_blank" rel="noopener">丁香园</a>，感谢它为我们提供的最新数据</p><h1 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h1><p>机器人平台还是使用广泛使用的酷q，但是这个机器人平台的开发语言居然是易语言？!</p><p>好在有大佬提供了兼容层插件，可以让我们用websocket或者是http使用接口，<a href="https://github.com/richardchien/coolq-http-api#readme" target="_blank" rel="noopener">链接</a></p><p>开发语言这次就使用python吧，当然也有大佬为我们提供了调用这个接口的库<a href="https://github.com/richardchien/python-aiocqhttp" target="_blank" rel="noopener">链接</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>第一步当然是配置好机器人和我们的程序了</p><p>首先使用以下代码设置好一个websocket服务器让机器人链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bot = CQHttp(access_token=<span class="string">'your-token'</span>,</span><br><span class="line">             enable_http_post=<span class="literal">False</span>)</span><br><span class="line">bot.run(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>然后配置机器人，找到httpapi插件的配置文件，更改如下位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"ws_reverse_api_url": "ws://127.0.0.1:6700/ws/api/",</span><br><span class="line">"ws_reverse_event_url": "ws://127.0.0.1:6700/ws/event/",</span><br><span class="line">"use_ws_reverse": true,</span><br><span class="line">"access_token": "your-token",</span><br></pre></td></tr></table></figure><p>其中<code>your-token</code>为访问令牌，随意设置</p><p>两个url请按照websocket服务器的信息填写，路径一定要按照这里的填写，不要少了最后哦的<code>/</code></p><p>启动机器人和你的程序，你应该能看到一条连接成功的信息</p><h1 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h1><p>该项目的核心部分在于获取信息，先来看看信息获取部分</p><p>打开丁香园网站，经过一番观察，我们发现数据都藏在几个script标签内</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200126232323.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200126232358.png"></p><p>而标签内的数据很有特点,他们都是这样的格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123; <span class="built_in">window</span>.A = B&#125;<span class="keyword">catch</span>(e)&#123;&#125;</span><br></pre></td></tr></table></figure><p>有趣的地方在于B，如果能够吧B提取出来，则B就是一个合法的json字符串，其中就包含了我们的信息，而A在同一个script标签内是不会变化的，我们就可以使用切片来得到B的值</p><p>为了获取这个script内的信息，我们也注意到每个script都有一个id</p><p>开始编码</p><p>我们使用一个库来帮助我们处理html</p><p><a href="https://github.com/psf/requests-html" target="_blank" rel="noopener">requests_html</a>，这个库是大名鼎鼎的requests库的作者的另一个作品，同样很容易上手，功能强大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_html <span class="keyword">import</span> HTMLSession</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="string">'https://3g.dxy.cn/newh5/view/pneumonia'</span>)</span><br><span class="line">data = r.html.find(<span class="string">"#getAreaStat"</span>, first=<span class="literal">True</span>).text</span><br><span class="line">data = data[<span class="number">27</span>:<span class="number">-11</span>]</span><br><span class="line">data = json.loads(data)</span><br></pre></td></tr></table></figure><p>这样的几行语句就可以得到各地区的人数了，同样的方法可以得到全国人数以及新闻</p><h1 id="自动播报"><a href="#自动播报" class="headerlink" title="自动播报"></a>自动播报</h1><p>能够得到数据还没完，我还想实现一个自动播报新闻的功能</p><p>我们注意到，每一条新闻都有一个<code>pubDate</code>属性，我们可以利用这个属性来判断有没有新的文章，即以下过程</p><p>获取全部文章-&gt;获取最新一个(就是第一个)的pubDate-&gt;如果与以记录的不同就发送信息并更新记录值-&gt;回到第一步</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200126233844.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200126233946.png"></p><p><a href="https://github.com/mzdluo123/wuhan_bot" target="_blank" rel="noopener">源码</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020.1-开发记录</title>
      <link href="/2020/01/22/2020-1-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/01/22/2020-1-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这段时间一直在写项目，现在来整理一下这段时间开发中遇到的一些坑吧</p><h1 id="Okhttp客户端保持session"><a href="#Okhttp客户端保持session" class="headerlink" title="Okhttp客户端保持session"></a>Okhttp客户端保持session</h1><p>很多时候我们使用http客户端都需要保持session，起初我以为okhttp应该会自动保存session，但是在实际使用过程中发现它并不会自动保存session，我们需要使用一个库来解决这个问题</p><p>在gradle的依赖中加入如下依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.squareup.okhttp3:okhttp-urlconnection:3.2.0&apos;</span><br></pre></td></tr></table></figure><p>像这样使用它</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">val</span> cookieManager = CookieManager()</span><br><span class="line"> .apply &#123; setCookiePolicy(CookiePolicy.ACCEPT_ALL) &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> client = OkHttpClient.Builder()</span><br><span class="line">    .connectTimeout(<span class="number">10000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .readTimeout(<span class="number">10000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">    .cookieJar(JavaNetCookieJar(cookieManager))</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure><p>这样编写代码就可以获得一个保存session的OkhttpClient了</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>虽然这样可以保持session，但是在实际使用中依然存在不少问题，例如无法持久化</p><p>可以使用下面的方案来解决该问题</p><p>先要加入以下源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maven &#123; url &quot;https://jitpack.io&quot; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &apos;com.github.franmontiel:PersistentCookieJar:v1.0.1&apos;</span><br></pre></td></tr></table></figure><p>这个库可以自动持久化cookie，只需要一个context参数即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookieJar: ClearableCookieJar =</span><br><span class="line">        PersistentCookieJar(SetCookieCache(), SharedPrefsCookiePersistor(MyApplication.getContext()))</span><br><span class="line"><span class="keyword">val</span> client = OkHttpClient.Builder()</span><br><span class="line">        .connectTimeout(<span class="number">10000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .readTimeout(<span class="number">10000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .cookieJar(cookieJar)  <span class="comment">//保持session</span></span><br><span class="line">        .build()</span><br></pre></td></tr></table></figure><h2 id="解析json返回格式"><a href="#解析json返回格式" class="headerlink" title="解析json返回格式"></a>解析json返回格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation group: &apos;com.squareup.retrofit2&apos;, name: &apos;converter-gson&apos;, version: &apos;2.4.0&apos;</span><br></pre></td></tr></table></figure><p>在创建retrofit的时候使用<code>.addConverterFactory(GsonConverterFactory.create())</code>即可</p><h1 id="使状态栏透明"><a href="#使状态栏透明" class="headerlink" title="使状态栏透明"></a>使状态栏透明</h1><p>方法很简单，只需在onCreate中加入以下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION)</span><br><span class="line">window.statusBarColor = Color.TRANSPARENT</span><br></pre></td></tr></table></figure><p>或是在对应的style中加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在style中更改theme属性之后，在Androidmanifest中为activity设置主题即可</p><p>其中</p><ul><li>第一行代码可以让状态栏透明</li><li>第二行让虚拟导航栏透明（有返回 home 和最近任务按钮的那一栏）</li><li>第三行是5.0之前让状态栏透明的方法</li><li>如果出现显示错误可以尝试添加代码<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:fitsSystemWindows"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>或手动更改布局文件来解决</li></ul><h1 id="隐藏ActionBar的另一种方法"><a href="#隐藏ActionBar的另一种方法" class="headerlink" title="隐藏ActionBar的另一种方法"></a>隐藏ActionBar的另一种方法</h1><p>现在很多方法都是直接将<code>style</code>中的<code>parent</code>改成NoActionBar，但是这样一来会有个问题，你重新创建一个style之后，如果你的主题颜色发生更改，则你必须要更改两个主题的颜色</p><p>可以通过继承原style解决这个问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.MaterialComponents.Light.DarkActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppThemeNoActionBar"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>AppThemeNoActionBar</code>的parent为AppTheme，他的主题颜色与AppTheme的相同，所不同的是这个主题可以隐藏ActionBar</p><p>同样的，你也可以用这样的方法创建一个style来实现状态栏透明</p><h1 id="实现一个提示内容会自动上移的EditText"><a href="#实现一个提示内容会自动上移的EditText" class="headerlink" title="实现一个提示内容会自动上移的EditText"></a>实现一个提示内容会自动上移的EditText</h1><p>效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200122224057.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200122224111.png"></p><p>要实现这个效果很简单，只需要使用md库内的Text Fields</p><p><a href="https://material.io/develop/android/components/text-input-layout/" target="_blank" rel="noopener">文档</a></p><h1 id="切换到某个Fragment里才在ActionBar显示菜单按钮"><a href="#切换到某个Fragment里才在ActionBar显示菜单按钮" class="headerlink" title="切换到某个Fragment里才在ActionBar显示菜单按钮"></a>切换到某个Fragment里才在ActionBar显示菜单按钮</h1><p>首先你需要在onCreateView里加入以下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setHasOptionsMenu(<span class="literal">true</span>)  <span class="comment">// 调用这个才会显示菜单</span></span><br></pre></td></tr></table></figure><p>然后重写方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>, inflater: <span class="type">MenuInflater</span>)</span></span> &#123;</span><br><span class="line">    inflater.inflate(R.menu.community_new_menu,menu)</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu, inflater)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意一下，这个方法与activity的有点不同，除了这个地方以外其他的都和activity的一样</p><h1 id="使用VierPager和TabLayout快速实现侧滑切换fragment"><a href="#使用VierPager和TabLayout快速实现侧滑切换fragment" class="headerlink" title="使用VierPager和TabLayout快速实现侧滑切换fragment"></a>使用VierPager和TabLayout快速实现侧滑切换fragment</h1><p>或许有更简单的方法</p><p>首先写一个Adapter，继承<code>androidx.fragment.app.FragmentPagerAdapter</code>并实现抽象方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommunityViewPagerAdapter</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> pageList: List&lt;Fragment&gt;, manager: FragmentManager) :</span><br><span class="line">    FragmentPagerAdapter(manager, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageList.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Fragment &#123;</span><br><span class="line">        <span class="keyword">return</span> pageList[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPageTitle</span><span class="params">(position: <span class="type">Int</span>)</span></span>: CharSequence? &#123;</span><br><span class="line">      <span class="comment">// 自己写吧</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要创建一个Adapter实例并使用setupWithViewPager即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fragment_community_viewPager.adapter = CommunityViewPagerAdapter(fragment, activity!!.supportFragmentManager)</span><br><span class="line">fragment_community_tabLayout.setupWithViewPager(fragment_community_viewPager)</span><br></pre></td></tr></table></figure><p>其中<code>fragment_community_viewPager</code>是用于显示fragment的ViewPager对象,fragment是一个存储Fragment实例的类</p><p><code>activity!!.supportFragmentManager</code>是一个<code>supportFragmentManager</code>对象，这里是在fragment内使用，使用时需要灵活替换</p><h1 id="一个好用的http客户端-Retrofit"><a href="#一个好用的http客户端-Retrofit" class="headerlink" title="一个好用的http客户端-Retrofit"></a>一个好用的http客户端-Retrofit</h1><p>不解释了，翻文档吧</p><p>贴个官方示例给大家看看这库有多好用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</span><br><span class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后你就可以发送http请求了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">    .baseUrl(<span class="string">"https://api.github.com/"</span>)</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">GitHubService service = retrofit.create(GitHubService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>如果返回内容是json格式，你甚至可以直接让库帮你解析为对象，只需要在Retrofit.Builder()时加入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.addConverterFactory(GsonConverterFactory.create())</span><br></pre></td></tr></table></figure><p>不过你需要一个依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> implementation group: &apos;com.squareup.retrofit2&apos;, name: &apos;converter-gson&apos;, version: &apos;2.4.0&apos;</span><br><span class="line">implementation &apos;com.squareup.okhttp3:okhttp-urlconnection:3.2.0&apos;</span><br></pre></td></tr></table></figure><h1 id="快速将tensorflow-lite导入到你的项目中"><a href="#快速将tensorflow-lite导入到你的项目中" class="headerlink" title="快速将tensorflow lite导入到你的项目中"></a>快速将tensorflow lite导入到你的项目中</h1><p><a href="https://heartbeat.fritz.ai/image-classification-on-android-with-tensorflow-lite-and-camerax-4f72e8fdca79" target="_blank" rel="noopener">参考</a></p><h2 id="获取相机图像信息"><a href="#获取相机图像信息" class="headerlink" title="获取相机图像信息"></a>获取相机图像信息</h2><p>参考文章的方法大致还是没有什么问题的，只是使用camerax库的时候使用的是旧版，新版的创建Analysis方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def camerax_version = &apos;1.0.0-alpha06&apos;</span><br><span class="line"> implementation &quot;androidx.camera:camera-core:$&#123;camerax_version&#125;&quot;</span><br><span class="line"> implementation &quot;androidx.camera:camera-camera2:$&#123;camerax_version&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> executor = Executors.newSingleThreadExecutor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> imageAnalysis = ImageAnalysis(analyzerConfig)</span><br><span class="line">imageAnalysis.setAnalyzer(executor, TFImageAnalyzer(uiHandler))</span><br></pre></td></tr></table></figure><p>不过说不定哪一天可能又改了呢</p><h2 id="导入并运行模型"><a href="#导入并运行模型" class="headerlink" title="导入并运行模型"></a>导入并运行模型</h2><p>可以使用最新的稳定版tflite</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation group: &apos;org.tensorflow&apos;, name: &apos;tensorflow-lite&apos;, version: &apos;2.1.0&apos;</span><br></pre></td></tr></table></figure><p>在构建Interpreter的时候有细微不同</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> options = Interpreter.Options()</span><br><span class="line">options.setUseNNAPI(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">val</span> interpreter = Interpreter(model, options)</span><br></pre></td></tr></table></figure><h1 id="快速使用深度学习实现移动端图片分类"><a href="#快速使用深度学习实现移动端图片分类" class="headerlink" title="快速使用深度学习实现移动端图片分类"></a>快速使用深度学习实现移动端图片分类</h1><p>keras内置了很多常用的模型，你可以使用这些模型快速构建你的应用</p><p><a href="https://keras.io/applications/" target="_blank" rel="noopener">链接</a></p><p>要训练自己的模型也很简单</p><p>所需依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"><span class="keyword">from</span> keras.optimizers <span class="keyword">import</span> Adam</span><br><span class="line"><span class="keyword">from</span> keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"><span class="keyword">from</span> keras.callbacks <span class="keyword">import</span> EarlyStopping, TensorBoard</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> keras.applications.mobilenet_v2 <span class="keyword">import</span> MobileNetV2</span><br></pre></td></tr></table></figure><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>以下是一个快速加载数据的代码段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(batch, shape, ptrain, pval)</span>:</span></span><br><span class="line">    <span class="string">"""Data generation and augmentation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Arguments</span></span><br><span class="line"><span class="string">        batch: Integer, batch size.</span></span><br><span class="line"><span class="string">        size: Integer, image size.</span></span><br><span class="line"><span class="string">        ptrain: train dir.</span></span><br><span class="line"><span class="string">        pval: eval dir.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Returns</span></span><br><span class="line"><span class="string">        train_generator: train set generator</span></span><br><span class="line"><span class="string">        validation_generator: validation set generator</span></span><br><span class="line"><span class="string">        count1: Integer, number of train set.</span></span><br><span class="line"><span class="string">        count2: Integer, number of test set.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  Using the data Augmentation in traning data</span></span><br><span class="line">    datagen1 = ImageDataGenerator(</span><br><span class="line">        rescale=<span class="number">1.</span> / <span class="number">255</span>,</span><br><span class="line">        shear_range=<span class="number">0.2</span>,</span><br><span class="line">        zoom_range=<span class="number">0.2</span>,</span><br><span class="line">        rotation_range=<span class="number">40</span>,</span><br><span class="line">        width_shift_range=<span class="number">0.2</span>,</span><br><span class="line">        height_shift_range=<span class="number">0.2</span>,</span><br><span class="line">        horizontal_flip=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    datagen2 = ImageDataGenerator(rescale=<span class="number">1.</span> / <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    train_generator = datagen1.flow_from_directory(</span><br><span class="line">        ptrain,</span><br><span class="line">        target_size=shape,</span><br><span class="line">        batch_size=batch,</span><br><span class="line">        class_mode=<span class="string">'categorical'</span>)</span><br><span class="line"></span><br><span class="line">    validation_generator = datagen2.flow_from_directory(</span><br><span class="line">        pval,</span><br><span class="line">        target_size=shape,</span><br><span class="line">        batch_size=batch,</span><br><span class="line">        class_mode=<span class="string">'categorical'</span>)</span><br><span class="line"></span><br><span class="line">    count1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(ptrain):</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> files:</span><br><span class="line">            count1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    count2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(pval):</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> files:</span><br><span class="line">            count2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_generator, validation_generator, count1, count2</span><br></pre></td></tr></table></figure><p>这段代码可以让你从文件夹加载图片并自动生成经过旋转，缩放的图片</p><p>数据集的文件夹格式应该是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-train</span><br><span class="line">    分类1</span><br><span class="line">        1.jpg</span><br><span class="line">        2.jpg</span><br><span class="line">    分类2</span><br><span class="line">        1.jpg</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">-validation</span><br><span class="line">    分类1</span><br><span class="line">        1.jpg</span><br><span class="line">        2.jpg</span><br><span class="line">    分类2</span><br><span class="line">        1.jpg</span><br><span class="line">        2.jpg</span><br><span class="line">    .</span><br><span class="line">    .</span><br></pre></td></tr></table></figure><h2 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h2><p>模型就使用mobilenetv2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = MobileNetV2(input_shape=shape, , classes=n_class)</span><br></pre></td></tr></table></figure><p><code>n_class</code>为分类的类别数量，<code>weights=None</code>可以让你从头开始训练你自己的模型，<code>shape</code>一般为(224,224,3)，三个参数分别是图片长，宽，通道数（如果你的图片是黑白的就填入1）</p><p>优化器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt = Adam(lr=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><p>lr为学习速度，注意并不是越快越好，0.001即可</p><p>提前结束训练和可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">earlystop = EarlyStopping(monitor=<span class="string">'val_acc'</span>, patience=<span class="number">5</span>, verbose=<span class="number">0</span>, mode=<span class="string">'auto'</span>)</span><br><span class="line">board = TensorBoard()</span><br></pre></td></tr></table></figure><p>编译模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.compile(loss=<span class="string">'categorical_crossentropy'</span>, optimizer=opt, metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure><p>加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_generator, validation_generator, count1, count2 = generate(batch, shape[:<span class="number">2</span>], train_dir,eval_dir)</span><br></pre></td></tr></table></figure><p><code>batch</code>是批次尺寸，具体请看<a href="https://www.zhihu.com/question/32673260" target="_blank" rel="noopener">链接</a></p><p>在获取了数据生成器之后我们还需要获取label列表，使用下面的函数来获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_labels</span><span class="params">(generator)</span>:</span></span><br><span class="line">    labels = generator.class_indices.keys()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"save/labels.txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = [line + <span class="string">'\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> labels]</span><br><span class="line">        file.writelines(lines)</span><br><span class="line">        print(<span class="string">"dump labels success"</span>)</span><br></pre></td></tr></table></figure><p>将刚刚获取的生成器传入即可</p><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>使用下面的代码来打印模型信息并开始训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model.summary()</span><br><span class="line">hist = model.fit_generator(</span><br><span class="line">    train_generator,</span><br><span class="line">    validation_data=validation_generator,</span><br><span class="line">    steps_per_epoch=count1 // batch,</span><br><span class="line">    validation_steps=count2 // batch,</span><br><span class="line">    epochs=epochs,</span><br><span class="line">    callbacks=[earlystop, board])</span><br></pre></td></tr></table></figure><p><code>epochs</code>是训练次数，一次训练会把数据全部过一遍</p><p>保存模型</p><p>一句话，就这么简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.save(<span class="string">"model.h5"</span>)</span><br></pre></td></tr></table></figure><h2 id="转换模型"><a href="#转换模型" class="headerlink" title="转换模型"></a>转换模型</h2><p>使用tensorflow的转换工具来转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tflite_convert --output_file=litemodel.tflite --keras_model_file=model.h5</span><br></pre></td></tr></table></figure><p>常见的模型都可以用这个方法来转换，但是部分模型似乎不行，本人也没找到好的方案</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Google的全新material design库搭建漂亮的应用</title>
      <link href="/2020/01/17/%E4%BD%BF%E7%94%A8Google%E7%9A%84%E5%85%A8%E6%96%B0material-design%E5%BA%93%E6%90%AD%E5%BB%BA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/01/17/%E4%BD%BF%E7%94%A8Google%E7%9A%84%E5%85%A8%E6%96%B0material-design%E5%BA%93%E6%90%AD%E5%BB%BA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>本文将会为你展示控件的基本用法</p><p><a href="https://material.io/develop/android/docs/getting-started/" target="_blank" rel="noopener">这里是官方文档</a></p><p>让我们开始吧！</p><h1 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h1><p>添加以下代码到正确的地方并刷新项目（不解释了）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.google.android.material:material:1.2.0-alpha03'</span></span><br></pre></td></tr></table></figure><h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><p><a href="https://material.io/develop/android/components/material-button/" target="_blank" rel="noopener">文档</a></p><p>在该库中，Button叫做 Material Button使用方法也很简单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.button.MaterialButton</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/material_button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"Button"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>结果出现了一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: The style on this component requires your app theme to be Theme.MaterialComponents (or a descendant).</span><br></pre></td></tr></table></figure><p>解决方法</p><p>将styles.xml中的<code>Theme.AppCompat.Light.DarkActionBar</code>改为<code>Theme.MaterialComponents.Light.DarkActionBar</code></p><p>效果如下</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200117235830.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200117235847.png"></p><p>点击的时候还会有水波纹效果</p><p>其中，按钮的背景颜色是<code>styles.xml</code>中的<code>colorPrimary</code>，如果要手动更改颜色可以添加<code>app:backgroundTint</code>属性</p><h1 id="Alert-Dialogs"><a href="#Alert-Dialogs" class="headerlink" title="Alert Dialogs"></a>Alert Dialogs</h1><p><a href="https://material.io/develop/android/components/dialog/" target="_blank" rel="noopener">文档</a></p><p>使用方法很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MaterialAlertDialogBuilder(context)</span><br><span class="line">            .setTitle(<span class="string">"Title"</span>)</span><br><span class="line">            .setMessage(<span class="string">"Message"</span>)</span><br><span class="line">            .setPositiveButton(<span class="string">"Ok"</span>, <span class="keyword">null</span>)</span><br><span class="line">            .show();</span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118000308.png"></p><p>好吧说实话我并没有看到什么不一样的东西</p><h1 id="Switches"><a href="#Switches" class="headerlink" title="Switches"></a>Switches</h1><p><a href="https://material.io/develop/android/components/switch/" target="_blank" rel="noopener">文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.switchmaterial.SwitchMaterial</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:checked</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:text</span>=<span class="string">"@string/switch_text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118000746.png"></p><p>还是一样的效果</p><h1 id="Bottom-Navigation"><a href="#Bottom-Navigation" class="headerlink" title="Bottom Navigation"></a>Bottom Navigation</h1><p>底部导航</p><p><a href="https://material.io/develop/android/components/bottom-navigation-view/" target="_blank" rel="noopener">文档</a></p><p>布局文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/bottom_navigation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/Widget.Design.BottomNavigationView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:itemIconTint</span>=<span class="string">"#FFFFFF"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:itemTextColor</span>=<span class="string">"#FFFFFF"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:menu</span>=<span class="string">"@menu/menu_nav"</span></span></span><br><span class="line"><span class="tag">   /&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>menu</code>为导航栏显示的内容，需要设置title和icon</p><p>在<code>BottomNavigationView</code>中也有一个叫做<code>labelVisibilityMode</code>的属性可以调整文字可见性</p><p>以下是效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118112648.png"> </p><p>这个组件还可以快速实现类似微信未读消息计数的效果，使用方法很简单</p><p>首先，为菜单的每一个item设置id</p><p>然后使用下面的代码添加计数组件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bottom_navigation.getOrCreateBadge(R.id.item_1)</span><br><span class="line"><span class="keyword">val</span> badge1 =bottom_navigation.getBadge(R.id.item_1)</span><br><span class="line">badge1?.number = <span class="number">1000</span></span><br><span class="line">badge1?.maxCharacterCount = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">bottom_navigation.getOrCreateBadge(R.id.item_2)</span><br><span class="line"></span><br><span class="line">bottom_navigation.getOrCreateBadge(R.id.item_3)</span><br><span class="line"><span class="keyword">val</span> badge3 = bottom_navigation.getBadge(R.id.item_3)</span><br><span class="line">badge3?.number = <span class="number">10</span></span><br><span class="line">badge3?.badgeGravity = BadgeDrawable.TOP_START</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118120012.png"></p><h1 id="Bottom-Sheets"><a href="#Bottom-Sheets" class="headerlink" title="Bottom Sheets"></a>Bottom Sheets</h1><p>一个可以从屏幕底部拉出来的组件</p><p><a href="https://material.io/develop/android/components/bottom-sheet-behavior/" target="_blank" rel="noopener">文档</a></p><p>使用方法很简单</p><p>首先添加一个<code>androidx.coordinatorlayout.widget.CoordinatorLayout</code><br>在内部嵌套你想要从屏幕底部拉出的组件</p><p>在该组件中添加三个属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app:layout_behavior="com.google.android.material.bottomsheet.BottomSheetBehavior"</span><br><span class="line">app:behavior_hideable ="false"</span><br><span class="line">app:behavior_peekHeight="30dp"</span><br></pre></td></tr></table></figure><p>其中<code>app:behavior_hideable&quot;</code>为组件是否可隐藏<br><code>app:behavior_peekHeight</code> 为折叠状态的高度</p><p>简单使用的效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118121743.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118121754.png"></p><h1 id="Chips"><a href="#Chips" class="headerlink" title="Chips"></a>Chips</h1><p><a href="https://material.io/develop/android/components/chip/" target="_blank" rel="noopener">文档</a></p><p>先上效果图</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118122039.png"></p><p>你还可以点击它</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.chip.Chip</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:text</span>=<span class="string">"HelloWorld"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>你还可以使用<code>app:chipIcon</code>来设置图标</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118122225.png"></p><p>有不同的style可以设置，让chip显示为不同的效果</p><p><code>@style/Widget.MaterialComponents.Chip.Entry</code></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118122354.png"></p><p><code>@style/Widget.MaterialComponents.Chip.Filter</code></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118122442.png"></p><p>还有很多还请自行尝试</p><p>监听点击和ChipGroup请看文档</p><h1 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h1><p><a href="https://material.io/develop/android/components/menu/" target="_blank" rel="noopener">文档</a></p><p>将以下代码添加到你的Theme内即可快速使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"popupMenuStyle"</span>&gt;</span>@style/Widget.MaterialComponents.PopupMenu<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:contextPopupMenuStyle"</span>&gt;</span>@style/Widget.MaterialComponents.PopupMenu.ContextMenu<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"actionOverflowMenuStyle"</span>&gt;</span>@style/Widget.MaterialComponents.PopupMenu.Overflow<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加后只需要按照常规的menu添加方法即可使用</p><p>显示效果，看起来比自带menu边角更圆一些，也有波纹效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118123044.png"></p><h2 id="PopupMenu"><a href="#PopupMenu" class="headerlink" title="PopupMenu"></a>PopupMenu</h2><p>在其他位置弹出菜单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">showMenu</span><span class="params">(View anchor)</span> </span>&#123;</span><br><span class="line">    PopupMenu popup = <span class="keyword">new</span> PopupMenu(<span class="keyword">this</span>, anchor);</span><br><span class="line">    popup.getMenuInflater().inflate(R.menu.custom_menu, popup.getMenu());</span><br><span class="line">    popup.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，如果anchor组件下方有空间菜单将会显示在它下面，否则显示在上面，你也可以使用<code>setOnMenuItemClickListener</code>来添加监听器</p><p>效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118123637.png"></p><h1 id="Material-Card"><a href="#Material-Card" class="headerlink" title="Material Card"></a>Material Card</h1><p><a href="https://material.io/develop/android/components/material-card-view/" target="_blank" rel="noopener">文档</a></p><p>好像和常见的CardView没多少区别</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118124026.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.card.MaterialCardView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"HelloWorld"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_margin</span>=<span class="string">"20dp"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">com.google.android.material.card.MaterialCardView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有一些小功能，具体请看文档</p><h1 id="Navigation-Views"><a href="#Navigation-Views" class="headerlink" title="Navigation Views"></a>Navigation Views</h1><p><a href="https://material.io/develop/android/components/navigation-view/" target="_blank" rel="noopener">文档</a></p><p>这个就是常见的侧滑菜单了，使用比较复杂</p><p>首先，我们需要一个这样的布局，最外层是<code>androidx.drawerlayout.widget.DrawerLayout</code>,在这个布局内部并列一个<code>CoordinatorLayout</code>和<code>NavigationView</code></p><p>以下是官方示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line">    你的布局放这里</span><br><span class="line">  <span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.google.android.material.navigation.NavigationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/navigation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"start|left"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:headerLayout</span>=<span class="string">"@layout/navigation_header"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:menu</span>=<span class="string">"@menu/my_navigation_items"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app:menu</code>是菜单资源 </p><p><code>headerLayout</code>是顶部显示的布局</p><p><code>android:layout_gravity=&quot;start|left&quot;</code>可以设置从左边拉出</p><p>仅仅是这样来使用它还完全不够，例如没有菜单按钮，导航菜单的顶部也没有覆盖整个界面</p><p>透明效果的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>    <span class="comment">&lt;!--状态栏为透明,如果设置为false，则没有黑色条盖住，见下图对比--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span> <span class="comment">&lt;!--导航栏为透明--&gt;</span></span><br></pre></td></tr></table></figure><p>在DrawerLayout添加<code>android:fitsSystemWindows=&quot;true&quot;</code>即可让菜单显示到状态栏下方</p><p>但是这样做之后还没达到我们想要的效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118131645.png"></p><p>为了解决这个问题，我们只能自定义自己的toolbar</p><p>首先隐藏原有的toolbar，将主题更改为<code>Theme.MaterialComponents.Light.NoActionBar</code></p><p>在<code>CoordinatorLayout</code>加入以下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在Activity中的onCreate加入以下代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setSupportActionBar(toolbar)</span><br><span class="line"><span class="keyword">val</span> toggle = ActionBarDrawerToggle(</span><br><span class="line">    <span class="keyword">this</span>, drawer_layout, toolbar, R.string.<span class="keyword">open</span>, R.string.close</span><br><span class="line">)</span><br><span class="line">drawer_layout.addDrawerListener(toggle)</span><br><span class="line">toggle.syncState()</span><br></pre></td></tr></table></figure><p>其中，两个string资源是对应操作的describe，用于无障碍</p><p>最终效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118212118.png"></p><p>侧边栏拉出时的动画也是正常的</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118212139.png"></p><p><a href="https://www.jianshu.com/p/d2b1689a23bf" target="_blank" rel="noopener">参考资料</a></p><h1 id="Snackbars"><a href="#Snackbars" class="headerlink" title="Snackbars"></a>Snackbars</h1><p><a href="https://material.io/develop/android/components/snackbar/" target="_blank" rel="noopener">文档</a></p><p>效果 </p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118213250.png"></p><p>使用方法很简单</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(coordinator, <span class="string">"Hello"</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">           .setAction(<span class="string">"撤销"</span>, View.OnClickListener &#123;</span><br><span class="line">           <span class="comment">//监听器</span></span><br><span class="line">           &#125;).show()</span><br></pre></td></tr></table></figure><p>其中,<code>coordinator</code>是一个CoordinatorLayout的id</p><p>官方建议将snackbar显示到CoordinatorLayout内，这样就可以启用滑动关闭功能</p><h1 id="Floating-Action-Buttons"><a href="#Floating-Action-Buttons" class="headerlink" title="Floating Action Buttons"></a>Floating Action Buttons</h1><p>就是常见的右下角浮动按钮</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.floatingactionbutton.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/floating_action_button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|right"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:backgroundTint</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pp:tint</span> = <span class="string">"#ffffff"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:srcCompat</span>=<span class="string">"@drawable/ic_android_black_24dp"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>同样也需要放到CoordinatorLayout中，他会自动移动位置使得snackbar不覆盖它</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200118214912.png"></p><p><code>app:tint = &quot;#ffffff&quot;</code>可以让图标显示的颜色变为白色，就算你的资源文件是黑色</p><h1 id="Text-Fields"><a href="#Text-Fields" class="headerlink" title="Text Fields"></a>Text Fields</h1><p>输入内容会自动上移的EditText</p><p><a href="https://material.io/develop/android/components/text-input-layout/" target="_blank" rel="noopener">文档</a></p><p>效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200122224057.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200122224111.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.google.android.material.textfield.TextInputLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">"提示文本"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">com.google.android.material.textfield.TextInputEditText</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.google.android.material.textfield.TextInputLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还有很多操作，具体请看文档</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>博主此次尝试的组件也只是这个库中的一小部分，还有很多库本人还没有一一尝试，有兴趣的朋友可以自行尝试</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改善idea的代码显示效果</title>
      <link href="/2020/01/14/%E6%94%B9%E5%96%84idea%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C/"/>
      <url>/2020/01/14/%E6%94%B9%E5%96%84idea%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从idea2019.2版本开始，自带的中文显示就变得很奇怪<br><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200114224018.png"></p><p>这样的显示效果看上去比较难受，是由于当前字体无法正确显示中文，可以考虑修改字体</p><p><strong>以下是一些代码字体推荐</strong></p><p><a href="https://zhuanlan.zhihu.com/p/36918101" target="_blank" rel="noopener">知乎链接</a></p><h1 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h1><p>在设置中找到font，如图</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200114224303.png"></p><p>其中每一项的作用如图所示</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200114224536.png"></p><p>图上也有本人的配置</p><p>效果如下</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200114224641.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决该死的&quot;设备正在使用中&quot;</title>
      <link href="/2019/12/30/%E8%A7%A3%E5%86%B3%E8%AF%A5%E6%AD%BB%E7%9A%84%E8%AE%BE%E5%A4%87%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/"/>
      <url>/2019/12/30/%E8%A7%A3%E5%86%B3%E8%AF%A5%E6%AD%BB%E7%9A%84%E8%AE%BE%E5%A4%87%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>相信大家在使用u盘时都会遇到这样的问题：在弹出u盘时通常会显示下面的提示框</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191230153401.png"></p><p>一般来说出现这个问题一般是因为u盘上的文件还处于打开状态，必须关闭文件才可以拔出</p><p><strong>然而</strong> 很多时候我们明明关闭了各种可能占用文件的程序，但是还是无法弹出u盘</p><p>为了解决这个问题，我们要想办法找出是什么软件打开了u盘上的文件</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>直接拔出u盘（手动滑稽）</p><p>不可否认这当然是最快的方法，但是如果u盘正在读写文件直接拔下u盘可能会导致文件损坏</p><p>虽然如此，我也没见过使用此方法导致文件损坏的案例</p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>使用<code>Windows资源监视器</code>来查找是什么应用占用了文件</p><p>首先打开<code>Windows任务管理器</code>，在性能选项卡找到以下按钮</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191230153956.png"></p><p>点击打开Windows资源监视器，在cpu一栏找到<code>关联的句柄</code></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191230154111.png"></p><p>在搜索句柄框内输入<code>盘符:\</code>来搜索是什么程序正在打开u盘上的文件</p><p>例如你的u盘插入到电脑显示为D盘，则你应该输入<code>D:\</code>，按下回车键开始搜索</p><p>在搜索结果中可能会出现一些<code>explorer.exe</code>和<code>svchost.exe</code>，这些都是系统应用，不必理会</p><p>除此之外，你应该关心的是其他的应用，你可以手动关闭那些应用，也可以通过右键直接结束它</p><p>在结束之后再使用弹出u盘，u盘应该能够正常弹出了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过静态博客的文章密码验证</title>
      <link href="/2019/12/26/%E7%BB%95%E8%BF%87%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/12/26/%E7%BB%95%E8%BF%87%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>不多说，直接开始</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在对该博客进行观察后，发现这个博客是使用了静态博客软件搭建的(本地由md文件生成html文件部署到服务器)</p><p>从这些地方也可以看出来</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226144850.png"></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226144952.png"></p><p>图一说明这是使用了一个静态博客程序</p><p>图二说明博客部署在GitHub page上，这个服务只能部署静态界面</p><h1 id="开搞"><a href="#开搞" class="headerlink" title="开搞"></a>开搞</h1><p>既然验证在前端，那直接查看前端源代码看看能不能解决</p><p>访问需要密码的界面就会弹出以下提示框</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226144639.png"></p><p>该提示框无法禁止弹出，并且如果密码错误或者是点击取消，页面将会重定向到其他页面</p><h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h2><p>如何弹出一个这样的提示框？学过前端的人应该知道可以用js实现</p><p>在chrome内的对应网页设置内有这样的一个设置</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226145431.png"></p><p>我们可以将JavaScript禁用</p><p>禁用之后，访问页面即可看到文章</p><p><strong>但是！！！！</strong> 由于禁用了JavaScript，页面的部分效果将无法加载，页面将无法正常显示</p><h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p>有没有办法在不禁用JavaScript的情况下访问呢？</p><p>办法是有的，使用f12先看看源代码</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226145802.png"></p><p>居然无法正确显示。。。。。</p><p>当然，这难不倒我们，只需要用一个软件来发送http请求并获取内容即可</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226145952.png"></p><p>查看代码</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226150052.png"></p><p>我们发现了校验密码的代码，<code>pwd</code>变量内存储了正确密码的sha256值，通过在线破解网站即可得到密码明文，输入即可解决</p><h2 id="法三"><a href="#法三" class="headerlink" title="法三"></a>法三</h2><p>但是上面的方法依然不完美，在线破解不是万能的，一部分记录是收费的，也不是所有sha值都可以查询到对应的明文</p><p>虽然我们在上面的源代码中已经可以得到关于文章的大部分信息了，但是为了追求完美还是再想想别的方案</p><p>对于<code>github.io</code>的域名搭建的博客，说不定可以到对应的GitHub page仓库内clone整个网站的代码，对刚刚的验证代码进行修改，在本地打开</p><p>从另一个方面看，如果我们可以拦截浏览器收到的数据，把对应的密码验证代码删除是不是也可以达到效果</p><p><strong>开始操作</strong></p><p>打开<code>BurpSuite</code>,需对浏览器进行配置,在对https网站进行抓取的时候还需配置证书，这部分网上教程很多就不多多赘述了</p><p>打开软件，在如图位置的复选框打勾即可拦截服务器发回的数据</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226150747.png"></p><p>找到页面的数据，对于其他数据包，按下<code>Forward</code>放行</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226151044.png"></p><p>改为以下内容并点击<code>Forward</code></p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20191226151122.png"></p><p>即可绕过密码并且不影响页面显示效果</p><p>对于这个软件来说，功能还有很多，更多功能可以百度学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速完成评课-JQuery的基本使用</title>
      <link href="/2019/12/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E8%AF%84%E8%AF%BE-JQuery%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/19/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%8C%E6%88%90%E8%AF%84%E8%AF%BE-JQuery%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没有前言，直接开始</p><img src="/" height= "500"/ class="lazyload" data-src="https://s2.ax1x.com/2019/12/19/QqEEy6.png"><img src="/" alt="QqE86P.png" border="0" / class="lazyload" data-src="https://s2.ax1x.com/2019/12/19/QqE86P.png"><p>观察代码后发现每个需要输入文字的框都有<code>am-form-field</code>这个class</p><p>使用<code>$(&quot;.class名字&quot;)</code>来选择，如果是id，可以使用<code>$(&quot;#id&quot;)</code>来选择，如果是选择某种标签可以使用<code>$(&quot;标签名字&quot;)</code>来选择</p><p>使用以下代码快速遍历所有分数输入框并填入分数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".am-form-field"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;$(<span class="keyword">this</span>).val(<span class="number">95</span>)&#125;)</span><br></pre></td></tr></table></figure><img src="/" width = 250/ class="lazyload" data-src="https://s2.ax1x.com/2019/12/20/QXAAAS.png"><p>最后还有这个意见框</p><img src="/" / class="lazyload" data-src="https://s2.ax1x.com/2019/12/20/QXAMn0.png"><p>直接使用选择器选择就可以解决</p><p>最后在提交按钮的onclick里找到了提交表单的函数，直接调用函数即可快速完成提交</p><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".am-form-field"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;$(<span class="keyword">this</span>).val(<span class="number">95</span>)&#125;)</span><br><span class="line">$(<span class="string">"textarea"</span>).val(<span class="string">"暂无"</span>)</span><br><span class="line">submitInfo();</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这里有一份中文文档可以参考一下</p><p><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">连接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个基于cloudflare的ddns客户端,支持Windows</title>
      <link href="/2019/12/16/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ecloudflare%E7%9A%84ddns%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%94%AF%E6%8C%81Windows/"/>
      <url>/2019/12/16/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8Ecloudflare%E7%9A%84ddns%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%94%AF%E6%8C%81Windows/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于一定的原因，本人内网DHCP得到的内网地址总是会不断变化，严重影响内网各项服务的正常工作</p><p>在找遍GitHub也没有找到一个可靠的跨平台的支持clooudflare的ddns脚本之后，博主决定自己动手写一个脚本</p><p>在这里感谢<a href="https://github.com/LINKIWI/cloudflare-ddns-client" target="_blank" rel="noopener">cloudflare-ddns-client</a>项目</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>查看了该项目的代码之后，发现该项目并不能很好的运用在本人的环境中，主要的问题在于如何获取内网的ip地址</p><p>在这里我决定使用python的<a href="https://psutil.readthedocs.io/en/latest/" target="_blank" rel="noopener">psutil</a>库来解决该问题，psutil库同时也提供了跨平台能力</p><img src="/" height=500  / class="lazyload" data-src="https://s2.ax1x.com/2019/12/16/Q49UHO.png"><p>贴一下获取地址的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip</span><span class="params">(prefix)</span>:</span></span><br><span class="line">    interfaces = psutil.net_if_addrs()</span><br><span class="line">    <span class="keyword">for</span> i, k <span class="keyword">in</span> interfaces.items():</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> k:</span><br><span class="line">            <span class="keyword">if</span> a.family == socket.AF_INET:</span><br><span class="line">                <span class="keyword">if</span> prefix <span class="keyword">in</span> a.address:</span><br><span class="line">                    <span class="keyword">return</span> a.address</span><br></pre></td></tr></table></figure><p>prefix是ip的前几段，例如10.0</p><p>因为本人环境比较特殊，每次获取到的ip都是前几段相同的，所以用这样的方式来解决获取想要的ip的问题</p><p>下面是获取ipv6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ipv6</span><span class="params">()</span>:</span></span><br><span class="line">    interfaces = psutil.net_if_addrs()</span><br><span class="line">    <span class="keyword">for</span> i, k <span class="keyword">in</span> interfaces.items():</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> k:</span><br><span class="line">            <span class="keyword">if</span> a.family == socket.AF_INET6:</span><br><span class="line">                <span class="keyword">return</span> a.address</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>也是同样的方案，但是并没有考虑多网卡的问题</p><p><code>socket.AF_INET6</code>和<code>socket.AF_INET</code>是标准库socket里的常量，用来表示类型</p><p>原代码已上传</p><p><a href="https://github.com/mzdluo123/cloudflare_ddns_for_windows" target="_blank" rel="noopener">项目地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造一个好用的套壳浏览器-AndroidLab论坛客户端开发记录</title>
      <link href="/2019/12/14/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%A5%97%E5%A3%B3%E6%B5%8F%E8%A7%88%E5%99%A8-AndroidLab%E8%AE%BA%E5%9D%9B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/12/14/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%A5%97%E5%A3%B3%E6%B5%8F%E8%A7%88%E5%99%A8-AndroidLab%E8%AE%BA%E5%9D%9B%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><img src="/" border="0" height=500/ class="lazyload" data-src="https://s2.ax1x.com/2019/12/14/Q2bUC4.jpg"><img src="/" width=600/ class="lazyload" data-src="https://s2.ax1x.com/2019/12/14/QR36wd.jpg"><h2 id="什么是套壳浏览器"><a href="#什么是套壳浏览器" class="headerlink" title="什么是套壳浏览器"></a>什么是套壳浏览器</h2><p>套壳浏览器指的是在一个app内一些看似很复杂的东西其实是内嵌了一个web浏览器来解决，在Android平台上，你可以使用webview来将浏览器嵌入到你的应用中</p><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><p>新建项目不写了 最低Android兼容版本为7.0 使用kotlin开发（学习）</p><h3 id="绘制布局"><a href="#绘制布局" class="headerlink" title="绘制布局"></a>绘制布局</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/swipe_refresh"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_webView"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">WebView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/"  height="392"/ class="lazyload" data-src="https://s2.ax1x.com/2019/12/14/Q2TZEF.png"><p>我使用了最新的<code>ConstraintLayout</code>，这种布局相对于<code>Relativelayout</code>性能更好，也更方便我这种小白使用（可以使用图形界面拖出你想要的效果）</p><p>其中<code>SwipeRefreshLayout</code>是官方的下拉刷新组件</p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置</span></span><br><span class="line">       <span class="keyword">val</span> settings = main_webView.settings</span><br><span class="line">       settings.javaScriptEnabled = <span class="literal">true</span></span><br><span class="line">       settings.allowFileAccess = <span class="literal">true</span></span><br><span class="line">       settings.cacheMode = WebSettings.LOAD_CACHE_ELSE_NETWORK</span><br><span class="line">       settings.userAgentString += <span class="string">" AndroidLabClient/<span class="subst">$&#123;BuildConfig.VERSION_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">       main_webView.webViewClient =</span><br><span class="line">       <span class="keyword">object</span> : WebViewClient() &#123;</span><br><span class="line">           <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">               view: <span class="type">WebView</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">               request: <span class="type">WebResourceRequest</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">           )</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (address <span class="keyword">in</span> request?.url.toString())&#123;  <span class="comment">//如果是论坛内部</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//如果是外部就使用系统浏览器打开</span></span><br><span class="line">               startActivity(Intent(Intent.ACTION_VIEW,request?.url))</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageFinished</span><span class="params">(view: <span class="type">WebView</span>?, url: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"当前url <span class="subst">$&#123;view?.url&#125;</span>"</span>)</span><br><span class="line">               <span class="keyword">if</span> (baseContext.resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;  <span class="comment">//横屏状态下</span></span><br><span class="line">                   window.setFlags(  <span class="comment">//全屏</span></span><br><span class="line">                       WindowManager.LayoutParams.FLAG_FULLSCREEN,</span><br><span class="line">                       WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">                   )</span><br><span class="line">                   main_webView.settings.apply &#123;  <span class="comment">//允许缩放</span></span><br><span class="line">                       builtInZoomControls = <span class="literal">true</span></span><br><span class="line">                       setSupportZoom(<span class="literal">true</span>)</span><br><span class="line">                       displayZoomControls = <span class="literal">true</span></span><br><span class="line">                   &#125;</span><br><span class="line">                   main_webView.evaluateJavascript(SCRIPT,  <span class="comment">//插入优化代码</span></span><br><span class="line">                       ValueCallback &#123;</span><br><span class="line"></span><br><span class="line">                       &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>以下代码实现下拉刷新</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下拉刷新的颜色</span></span><br><span class="line">     swipe_refresh.setColorSchemeResources(</span><br><span class="line">         android.R.color.holo_blue_bright,</span><br><span class="line">         android.R.color.holo_green_light, android.R.color.holo_orange_light,</span><br><span class="line">         android.R.color.holo_red_light</span><br><span class="line">     )</span><br><span class="line">     <span class="comment">//下拉刷新回调</span></span><br><span class="line">     swipe_refresh.setOnRefreshListener &#123;</span><br><span class="line">         main_webView.clearCache(<span class="literal">true</span>)</span><br><span class="line">         main_webView.reload()</span><br><span class="line">         swipe_refresh.isRefreshing = <span class="literal">false</span> <span class="comment">//让下拉球消失</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>以下代码实现按下back键返回webview中的网页而不退出app</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyDown</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; main_webView.canGoBack()) &#123;</span><br><span class="line">        main_webView.goBack()  <span class="comment">//back键返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下代码实现切换屏幕方向不丢失webview的返回数据，使屏幕翻转后也可以正常返回而不是直接退出app</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//保存和加载信息</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSaveInstanceState</span><span class="params">(outState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    main_webView.saveState(outState)</span><br><span class="line">    <span class="keyword">super</span>.onSaveInstanceState(outState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRestoreInstanceState</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>)</span></span> &#123;</span><br><span class="line">    main_webView.restoreState(savedInstanceState)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些美化代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.window.decorView.systemUiVisibility =</span><br><span class="line">        View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR   <span class="comment">//设置白底黑图标状态栏</span></span><br><span class="line">    supportActionBar?.hide()   <span class="comment">//隐藏标题栏</span></span><br></pre></td></tr></table></figure><p>状态栏颜色还需要在styles.xml中修改</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p><a href="https://github.com/mzdluo123/AndroidLabClient" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android图片动态加载库Glide的使用</title>
      <link href="/2019/12/03/Android%E5%9B%BE%E7%89%87%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%BA%93Glide%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/03/Android%E5%9B%BE%E7%89%87%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%BA%93Glide%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Glide是一个快速高效的Android图片加载库，注重于平滑的滚动。Glide提供了易用的API，高性能、可扩展的图片解码管道（decode pipeline），以及自动的资源池技术。</p><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>必须使用SDK 27编译</p><p>在<code>build.gradle</code>中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.github.bumptech.glide:glide:4.9.0'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.9.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><p>多数情况下，使用Glide加载图片非常简单，一行代码足矣：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(fragment)</span><br><span class="line">    .load(myUrl)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure><p>取消加载同样很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(fragment).clear(imageView);</span><br></pre></td></tr></table></figure><p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p><p>从网络加载可能会遇到以下问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.IOException: Cleartext HTTP traffic to xxx.xxx.xxx.xxx not permitted</span><br></pre></td></tr></table></figure><p>Android9.0 默认是禁止所有的http请求<br>需加入以下代码到清单文件中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">android:usesCleartextTraffic="true"</span></span><br></pre></td></tr></table></figure><p><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/12/03/QMSxVH.png"></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><a href="https://muyangmin.github.io/glide-docs-cn/doc/getting-started.html" target="_blank" rel="noopener">项目地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自用各种网站，资源整理</title>
      <link href="/2019/11/29/%E8%87%AA%E7%94%A8%E5%90%84%E7%A7%8D%E7%BD%91%E7%AB%99%EF%BC%8C%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/"/>
      <url>/2019/11/29/%E8%87%AA%E7%94%A8%E5%90%84%E7%A7%8D%E7%BD%91%E7%AB%99%EF%BC%8C%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="本人自用各类网站整理（无视封面）"><a href="#本人自用各类网站整理（无视封面）" class="headerlink" title="本人自用各类网站整理（无视封面）"></a>本人自用各类网站整理（无视封面）</h2><p>这里没有车，主要都是本人浏览器收藏夹内的一些小玩意</p><p>当然别忘了还有b站也有很多东西哦</p><p>本贴持续更新</p><p><strong>最佳食用方式:在侧边栏找到你需要的东西</strong></p><p>手机请在右下角找到菜单按钮</p><hr><h2 id="工具和资源"><a href="#工具和资源" class="headerlink" title="工具和资源"></a>工具和资源</h2><h3 id="CTF在线小工具"><a href="#CTF在线小工具" class="headerlink" title="CTF在线小工具"></a>CTF在线小工具</h3><p><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">链接</a></p><p>如果要使用收费加解密功能就使用手机打开网页</p><h3 id="wolframalpha在线计算器"><a href="#wolframalpha在线计算器" class="headerlink" title="wolframalpha在线计算器"></a>wolframalpha在线计算器</h3><p><a href="https://www.wolframalpha.com/" target="_blank" rel="noopener">链接</a></p><p>功能强大，可能需要一些英语基础</p><h3 id="md5在线爆破"><a href="#md5在线爆破" class="headerlink" title="md5在线爆破"></a>md5在线爆破</h3><p><a href="https://cmd5.com/" target="_blank" rel="noopener">链接</a></p><p>部分记录可能要付费</p><h3 id="带加速的ssh客户端FinalShell"><a href="#带加速的ssh客户端FinalShell" class="headerlink" title="带加速的ssh客户端FinalShell"></a>带加速的ssh客户端FinalShell</h3><p><a href="http://www.hostbuf.com/c/131.html" target="_blank" rel="noopener">链接</a></p><p>带加速功能，安全性未知</p><h3 id="书籍搜索"><a href="#书籍搜索" class="headerlink" title="书籍搜索"></a>书籍搜索</h3><p>鸠摩搜书</p><p><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">链接</a></p><h3 id="数据结构可视化"><a href="#数据结构可视化" class="headerlink" title="数据结构可视化"></a>数据结构可视化</h3><p><a href="https://visualgo.net/zh" target="_blank" rel="noopener">链接</a></p><h3 id="yandex网盘（应该还可以直连）"><a href="#yandex网盘（应该还可以直连）" class="headerlink" title="yandex网盘（应该还可以直连）"></a>yandex网盘（应该还可以直连）</h3><p><a href="https://disk.yandex.com/" target="_blank" rel="noopener">链接</a></p><h3 id="Nginx配置在线生成"><a href="#Nginx配置在线生成" class="headerlink" title="Nginx配置在线生成"></a>Nginx配置在线生成</h3><p><a href="https://www.digitalocean.com/community/tools/nginx" target="_blank" rel="noopener">链接</a></p><h3 id="一键lnmp"><a href="#一键lnmp" class="headerlink" title="一键lnmp"></a>一键lnmp</h3><p>还可以自动申请证书</p><p><a href="https://oneinstack.com/auto/" target="_blank" rel="noopener">链接</a></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><a href="https://imgchr.com/" target="_blank" rel="noopener">链接</a></p><h3 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a>XSS平台</h3><p><a href="https://webxss.top/" target="_blank" rel="noopener">链接</a></p><h3 id="鼠标多机同步"><a href="#鼠标多机同步" class="headerlink" title="鼠标多机同步"></a>鼠标多机同步</h3><p><a href="https://symless.com/synergy" target="_blank" rel="noopener">链接</a></p><h3 id="QQ机器人框架"><a href="#QQ机器人框架" class="headerlink" title="QQ机器人框架"></a>QQ机器人框架</h3><p>支持linux</p><p><a href="https://cqhttp.cc/docs/4.12/#/" target="_blank" rel="noopener">链接</a></p><h3 id="校园网认证"><a href="#校园网认证" class="headerlink" title="校园网认证"></a>校园网认证</h3><p><a href="https://github.com/updateing/mentohust-v4-proxy" target="_blank" rel="noopener">链接</a></p><h3 id="chrome代理切换工具"><a href="#chrome代理切换工具" class="headerlink" title="chrome代理切换工具"></a>chrome代理切换工具</h3><p><a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">链接</a></p><h3 id="ctf工具"><a href="#ctf工具" class="headerlink" title="ctf工具"></a>ctf工具</h3><p><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">链接</a></p><h3 id="刷课工具"><a href="#刷课工具" class="headerlink" title="刷课工具"></a>刷课工具</h3><p><a href="https://github.com/CodFrm/cxmooc-tools" target="_blank" rel="noopener">链接</a></p><h3 id="网速监测"><a href="#网速监测" class="headerlink" title="网速监测"></a>网速监测</h3><p><a href="https://github.com/zhongyang219/TrafficMonitor" target="_blank" rel="noopener">链接</a></p><h3 id="gif录制"><a href="#gif录制" class="headerlink" title="gif录制"></a>gif录制</h3><p><a href="https://github.com/NickeManarin/ScreenToGif" target="_blank" rel="noopener">链接</a></p><h3 id="代码截图生成"><a href="#代码截图生成" class="headerlink" title="代码截图生成"></a>代码截图生成</h3><p><a href="https://carbon.now.sh/" target="_blank" rel="noopener">链接</a></p><h3 id="Windows系统工具"><a href="#Windows系统工具" class="headerlink" title="Windows系统工具"></a>Windows系统工具</h3><p>来自微软的Windows系统工具</p><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/" target="_blank" rel="noopener">连接</a></p><h3 id="Android逆向工具-apkstudio"><a href="#Android逆向工具-apkstudio" class="headerlink" title="Android逆向工具-apkstudio"></a>Android逆向工具-apkstudio</h3><p><a href="https://github.com/vaibhavpandeyvpz/apkstudio" target="_blank" rel="noopener">链接</a></p><h2 id="文档和教程"><a href="#文档和教程" class="headerlink" title="文档和教程"></a>文档和教程</h2><h3 id="Butterfly-本博客的主题"><a href="#Butterfly-本博客的主题" class="headerlink" title="Butterfly(本博客的主题)"></a>Butterfly(本博客的主题)</h3><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">链接</a></p><h3 id="NodeMcu"><a href="#NodeMcu" class="headerlink" title="NodeMcu"></a>NodeMcu</h3><p>nodemcu是一个物联网开发平台固件</p><p><a href="https://nodemcu-build.com/" target="_blank" rel="noopener">自定义构建</a></p><p><a href="https://nodemcu.readthedocs.io/en/master/" target="_blank" rel="noopener">文档</a></p><p><a href="https://github.com/4refr0nt/ESPlorer" target="_blank" rel="noopener">开发工具</a></p><h3 id="MD教程"><a href="#MD教程" class="headerlink" title="MD教程"></a>MD教程</h3><p><a href="http://www.markdown.cn/" target="_blank" rel="noopener">链接</a></p><h3 id="Android开发入门"><a href="#Android开发入门" class="headerlink" title="Android开发入门"></a>Android开发入门</h3><p><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">链接</a></p><h3 id="Linux命令快捷查询"><a href="#Linux命令快捷查询" class="headerlink" title="Linux命令快捷查询"></a>Linux命令快捷查询</h3><p><a href="https://man.linuxde.net/" target="_blank" rel="noopener">链接</a></p><h3 id="Windows快捷键文档"><a href="#Windows快捷键文档" class="headerlink" title="Windows快捷键文档"></a>Windows快捷键文档</h3><p><a href="https://support.microsoft.com/zh-cn/help/12445/windows-keyboard-shortcuts" target="_blank" rel="noopener">链接</a></p><h3 id="BBR开启（懂的都懂）"><a href="#BBR开启（懂的都懂）" class="headerlink" title="BBR开启（懂的都懂）"></a>BBR开启（懂的都懂）</h3><p><a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AF-TCP-BBR-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">链接</a></p><h3 id="各种免费it教程"><a href="#各种免费it教程" class="headerlink" title="各种免费it教程"></a>各种免费it教程</h3><p><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">链接</a></p><h3 id="msf教程"><a href="#msf教程" class="headerlink" title="msf教程"></a>msf教程</h3><p><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">链接</a></p><h3 id="kail工具说明"><a href="#kail工具说明" class="headerlink" title="kail工具说明"></a>kail工具说明</h3><p><a href="https://tools.kali.org/tools-listing" target="_blank" rel="noopener">链接</a></p><h3 id="ThinkingInJava"><a href="#ThinkingInJava" class="headerlink" title="ThinkingInJava"></a>ThinkingInJava</h3><p><a href="http://www.yq1012.com/ThinkingInJava/" target="_blank" rel="noopener">链接</a></p><h3 id="pythonCookBook"><a href="#pythonCookBook" class="headerlink" title="pythonCookBook"></a>pythonCookBook</h3><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">链接</a></p><h3 id="matplotlib中文文档"><a href="#matplotlib中文文档" class="headerlink" title="matplotlib中文文档"></a>matplotlib中文文档</h3><p><a href="https://github.com/teadocs/matplotlib-cn" target="_blank" rel="noopener">链接</a></p><h3 id="另一个Android教程"><a href="#另一个Android教程" class="headerlink" title="另一个Android教程"></a>另一个Android教程</h3><p><a href="https://github.com/open-android/Android" target="_blank" rel="noopener">链接</a></p><h3 id="dockerhub国内高速镜像"><a href="#dockerhub国内高速镜像" class="headerlink" title="dockerhub国内高速镜像"></a>dockerhub国内高速镜像</h3><p><a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">链接</a></p><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><h3 id="python串口库"><a href="#python串口库" class="headerlink" title="python串口库"></a>python串口库</h3><p><a href="https://github.com/pyserial/pyserial" target="_blank" rel="noopener">链接</a></p><h3 id="scrapy文档"><a href="#scrapy文档" class="headerlink" title="scrapy文档"></a>scrapy文档</h3><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/overview.html" target="_blank" rel="noopener">链接</a></p><h3 id="中文nlp"><a href="#中文nlp" class="headerlink" title="中文nlp"></a>中文nlp</h3><p><a href="https://github.com/SeanLee97/xmnlp" target="_blank" rel="noopener">链接</a></p><h3 id="各种python库"><a href="#各种python库" class="headerlink" title="各种python库"></a>各种python库</h3><p><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">链接</a></p><h3 id="网页上的动态纸片人"><a href="#网页上的动态纸片人" class="headerlink" title="网页上的动态纸片人"></a>网页上的动态纸片人</h3><p><a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">链接</a></p><h3 id="python开箱即用的headless-chrome"><a href="#python开箱即用的headless-chrome" class="headerlink" title="python开箱即用的headless chrome"></a>python开箱即用的headless chrome</h3><p><a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">链接</a></p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">链接</a></p><h3 id="预先编译好的python库for-WIndows"><a href="#预先编译好的python库for-WIndows" class="headerlink" title="预先编译好的python库for WIndows"></a>预先编译好的python库for WIndows</h3><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">链接</a></p><h3 id="深度学习图像识别库（小白专属）"><a href="#深度学习图像识别库（小白专属）" class="headerlink" title="深度学习图像识别库（小白专属）"></a>深度学习图像识别库（小白专属）</h3><p><a href="https://github.com/OlafenwaMoses/ImageAI" target="_blank" rel="noopener">链接</a></p><h2 id="数字媒体"><a href="#数字媒体" class="headerlink" title="数字媒体"></a>数字媒体</h2><h3 id="AutoDraw"><a href="#AutoDraw" class="headerlink" title="AutoDraw"></a>AutoDraw</h3><p>自备**</p><p><a href="https://www.autodraw.com/" target="_blank" rel="noopener">链接</a></p><h3 id="doyoudo（教程）"><a href="#doyoudo（教程）" class="headerlink" title="doyoudo（教程）"></a>doyoudo（教程）</h3><p><a href="https://www.doyoudo.com/" target="_blank" rel="noopener">链接</a></p><h3 id="高清免费照片Unsplash"><a href="#高清免费照片Unsplash" class="headerlink" title="高清免费照片Unsplash"></a>高清免费照片Unsplash</h3><p><a href="https://unsplash.com/t/wallpapers" target="_blank" rel="noopener">链接</a></p><h3 id="多功能转码工具"><a href="#多功能转码工具" class="headerlink" title="多功能转码工具"></a>多功能转码工具</h3><p><a href="https://github.com/staxrip/staxrip" target="_blank" rel="noopener">链接</a></p><h3 id="PR-bgm卡点插件"><a href="#PR-bgm卡点插件" class="headerlink" title="PR bgm卡点插件"></a>PR bgm卡点插件</h3><p><a href="http://www.lookae.com/beatedit-10102/" target="_blank" rel="noopener">链接</a></p><h2 id="可能会用到的一些小东西"><a href="#可能会用到的一些小东西" class="headerlink" title="可能会用到的一些小东西"></a>可能会用到的一些小东西</h2><h3 id="在线判题系统"><a href="#在线判题系统" class="headerlink" title="在线判题系统"></a>在线判题系统</h3><p><a href="https://github.com/QingdaoU/OnlineJudge" target="_blank" rel="noopener">链接</a></p><h3 id="表情包"><a href="#表情包" class="headerlink" title="表情包"></a>表情包</h3><p><a href="https://github.com/zhaoolee/ChineseBQB" target="_blank" rel="noopener">链接</a></p><h3 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h3><p><a href="https://github.com/fire-keeper/BlindWatermark" target="_blank" rel="noopener">链接</a></p><h3 id="OneDrive直链"><a href="#OneDrive直链" class="headerlink" title="OneDrive直链"></a>OneDrive直链</h3><p><a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">链接</a></p><h3 id="狗屁不通文章生成器"><a href="#狗屁不通文章生成器" class="headerlink" title="狗屁不通文章生成器"></a>狗屁不通文章生成器</h3><p><a href="https://suulnnka.github.io/BullshitGenerator/index.html" target="_blank" rel="noopener">链接</a></p><h3 id="帮你解决伸手党"><a href="#帮你解决伸手党" class="headerlink" title="帮你解决伸手党"></a>帮你解决伸手党</h3><p><a href="https://github.com/mengkunsoft/lmbtfy" target="_blank" rel="noopener">链接</a></p><h3 id="IP段查询"><a href="#IP段查询" class="headerlink" title="IP段查询"></a>IP段查询</h3><p><a href="http://ipcn.chacuo.net/view/i_CHINANET" target="_blank" rel="noopener">链接</a></p><h3 id="本贴封面生成"><a href="#本贴封面生成" class="headerlink" title="本贴封面生成"></a>本贴封面生成</h3><p><a href="https://github.com/bestony/logoly" target="_blank" rel="noopener">链接</a></p><h3 id="真香表情包生成"><a href="#真香表情包生成" class="headerlink" title="真香表情包生成"></a>真香表情包生成</h3><p><a href="https://github.com/xtyxtyx/sorry" target="_blank" rel="noopener">链接</a></p><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">链接</a></p><h3 id="直播服务器"><a href="#直播服务器" class="headerlink" title="直播服务器"></a>直播服务器</h3><p><a href="https://github.com/ossrs/srs" target="_blank" rel="noopener">链接</a></p><h2 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h2><h3 id="Android快速截图"><a href="#Android快速截图" class="headerlink" title="Android快速截图"></a>Android快速截图</h3><p><a href="https://blog.macuyiko.com/post/2017/note-to-self-fast-android-screen-capture.html" target="_blank" rel="noopener">链接</a></p><h3 id="Chrome移动版状态栏变色"><a href="#Chrome移动版状态栏变色" class="headerlink" title="Chrome移动版状态栏变色"></a>Chrome移动版状态栏变色</h3><p><a href="https://www.zhihu.com/question/45207555/answer/99297037" target="_blank" rel="noopener">链接</a></p><h3 id="一个好用的js夜间模式代码"><a href="#一个好用的js夜间模式代码" class="headerlink" title="一个好用的js夜间模式代码"></a>一个好用的js夜间模式代码</h3><p><a href="https://www.iteye.com/blog/weistar-1986280" target="_blank" rel="noopener">链接</a><br><a href="https://github.com/sandoche/Darkmode.js?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">另一个</a></p><h3 id="unity的il2cpp模式逆向"><a href="#unity的il2cpp模式逆向" class="headerlink" title="unity的il2cpp模式逆向"></a>unity的il2cpp模式逆向</h3><p><a href="https://zhuanlan.zhihu.com/p/32468958" target="_blank" rel="noopener">链接</a></p><h3 id="Android-studio模拟器安装到d盘"><a href="#Android-studio模拟器安装到d盘" class="headerlink" title="Android studio模拟器安装到d盘"></a>Android studio模拟器安装到d盘</h3><p><a href="https://www.cnblogs.com/LiuDanK/articles/10106473.html" target="_blank" rel="noopener">链接</a></p><h2 id="移动端的那些东西"><a href="#移动端的那些东西" class="headerlink" title="移动端的那些东西"></a>移动端的那些东西</h2><h3 id="谷歌相机"><a href="#谷歌相机" class="headerlink" title="谷歌相机"></a>谷歌相机</h3><p><a href="https://www.celsoazevedo.com/files/android/google-camera/dev-arnova8G2/" target="_blank" rel="noopener">链接</a></p><h3 id="付费软件免费下"><a href="#付费软件免费下" class="headerlink" title="付费软件免费下"></a>付费软件免费下</h3><p><a href="https://www.aptoide.com/" target="_blank" rel="noopener">链接</a></p><h3 id="开WiFi又开热点"><a href="#开WiFi又开热点" class="headerlink" title="开WiFi又开热点"></a>开WiFi又开热点</h3><p><a href="https://github.com/Mygod/VPNHotspot" target="_blank" rel="noopener">链接</a></p><h3 id="自动化脚本引擎"><a href="#自动化脚本引擎" class="headerlink" title="自动化脚本引擎"></a>自动化脚本引擎</h3><p><a href="https://github.com/hyb1996/Auto.js" target="_blank" rel="noopener">链接</a></p><h3 id="免root的xposed"><a href="#免root的xposed" class="headerlink" title="免root的xposed"></a>免root的xposed</h3><p><a href="https://github.com/android-hacker/VirtualXposed" target="_blank" rel="noopener">链接</a></p><h3 id="电脑控制手机"><a href="#电脑控制手机" class="headerlink" title="电脑控制手机"></a>电脑控制手机</h3><p><a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">链接</a></p><h2 id="Minecraft-乱入"><a href="#Minecraft-乱入" class="headerlink" title="Minecraft(乱入)"></a>Minecraft(乱入)</h2><h3 id="服务端镜像站"><a href="#服务端镜像站" class="headerlink" title="服务端镜像站"></a>服务端镜像站</h3><p><a href="https://yivesmirror.com/downloads/paper" target="_blank" rel="noopener">链接</a></p><h3 id="开源启动器"><a href="#开源启动器" class="headerlink" title="开源启动器"></a>开源启动器</h3><p><a href="https://github.com/zhuowei/MCPELauncher" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的完成青年大学习</title>
      <link href="/2019/11/26/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%8C%E6%88%90%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/26/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%8C%E6%88%90%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何优雅的完成青年大学习"><a href="#如何优雅的完成青年大学习" class="headerlink" title="如何优雅的完成青年大学习"></a>如何优雅的完成青年大学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文章仅限学习目的，请勿用作其他用途</p><p>最近班上统一组织青年大学习，每个人都必须要完成，其内容是观看一个170秒的视频；博主突然产生了一个大胆的想法，于是就有了这篇文章</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>既然要优雅地完成大学习，首先得让微信给我们一个输入自己的代码的机会</p><p>按照如下步骤可以打开微信的开发工具</p><p>微信浏览器网页打开<a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a>打开下面两项，就可以调试了</p><p>图片来源于网络</p><img src="/" height="330" width="190"  class="lazyload" data-src="https://s2.ax1x.com/2019/11/26/QSO7tS.png"><p>现在，你的网页右下角会显示一个<code>vConsole</code>点击它可以打开控制台</p><h2 id="搞事"><a href="#搞事" class="headerlink" title="搞事"></a>搞事</h2><p>打开青年大学习第七季，切换到如下界面</p><img src="/" height="330" width="190"  class="lazyload" data-src="https://s2.ax1x.com/2019/11/26/QSX1cd.jpg"><p>输入以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.section3'</span>).addClass(<span class="string">'topindex1'</span>);</span><br><span class="line">$(<span class="string">'.section4,#Cvideo'</span>).hide();</span><br></pre></td></tr></table></figure><p>按下ok执行代码即可快速跳过</p><h2 id="微信朋友圈分享"><a href="#微信朋友圈分享" class="headerlink" title="微信朋友圈分享"></a>微信朋友圈分享</h2><p>使用上面的代码快速完成大学习后，使用微信分享仍然是未完成状态</p><p>查阅资料后得知导致这一问题的原因是腾讯分享的sdk标题是网站自定义的，只好通过下面的代码来重新配置腾讯分享sdk来达到正常效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> newtitle = title.slice(<span class="number">0</span>, <span class="number">7</span>) + <span class="string">"网上主题团课"</span> + title.slice(<span class="number">7</span>);</span><br><span class="line">$(<span class="string">"script"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line">     <span class="keyword">var</span> content = $(<span class="keyword">this</span>).text();</span><br><span class="line">     <span class="keyword">if</span> (content.indexOf(title)!=<span class="number">-1</span>) &#123;</span><br><span class="line">         <span class="keyword">var</span> script = content.replace(title,<span class="string">"满分！我完成了"</span>+newtitle+<span class="string">"，你也来试试吧"</span>);</span><br><span class="line">         <span class="built_in">eval</span>(script);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>方案比较暴力，因为对应的dom元素没有id，只好查找替换了</p><p>效果</p><p><img src="/" alt="" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/mzdluo123/blog_imgs/img/20200305211036.png"></p><h2 id="但是为什么是这样的"><a href="#但是为什么是这样的" class="headerlink" title="但是为什么是这样的"></a>但是为什么是这样的</h2><p>要搞清楚为什么是这样的，那就得使用调试工具对源代码一探究竟了</p><p>使用usb线将手机连接到电脑，打开手机的usb调试功能，并对电脑链接进行授权</p><p>（这里可能有人想问为啥不使用桌面版chrome的开发者工具直接调试网站，博主刚开始尝试使用桌面版chrome加载该网站时无论使用任何办法都无法将其切换到移动版的学习界面，可能是本人技术不够吧）</p><p>授权在微信内复制学习页面的链接，使用移动版chrome进入到开始学习页面，使用桌面版chrome打开<code>chrome://inspect/#devices</code></p><p>稍等片刻后就可以显示出chrome打开的网站</p><p><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/11/26/QpSI7n.png"></p><p>点击<code>inspect</code>即可开始调试该网页</p><p>在某个script标签内找到了如下代码<br><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/11/27/QC3N36.png"></p><p>既然视频结束后肯定要暂停视频并且显示某个页面，那么就把代码粘贴到console试试</p><p>成功!<br><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/11/16/M0ICh6.png"></p><h2 id="iOS平台呢"><a href="#iOS平台呢" class="headerlink" title="iOS平台呢"></a>iOS平台呢</h2><p>经过网友测试，本方法无法在ios平台使用</p><img src="/" width = 200 / class="lazyload" data-src="https://s2.ax1x.com/2019/12/20/QXkNef.png"><p>如果你正在使用ios平台，在播放视频时可以使用系统快捷菜单里的音乐播放控制来解决，即拖动播放进度条</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建一个自己的博客</title>
      <link href="/2019/11/25/%E5%A6%82%E4%BD%95j%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/25/%E5%A6%82%E4%BD%95j%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="如何搭建一个像这样的静态博客"><a href="#如何搭建一个像这样的静态博客" class="headerlink" title="如何搭建一个像这样的静态博客"></a>如何搭建一个像这样的静态博客</h1><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>一个GitHub账号</li><li>搜索引擎</li><li>git客户端</li><li>你的大脑</li></ul><h2 id="第一步：创建博客仓库"><a href="#第一步：创建博客仓库" class="headerlink" title="第一步：创建博客仓库"></a>第一步：创建博客仓库</h2><p>在GitHub创建一个仓库，其中仓库名称必须为<code>你的用户名.github.io</code>，仓库类型为公开仓库</p><p>类似这样<br><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/11/25/Mvf80I.png"></p><p>创建成功后进入下一步</p><h2 id="安装博客工具"><a href="#安装博客工具" class="headerlink" title="安装博客工具"></a>安装博客工具</h2><p>首先安装nodejs，这一步请自行百度安装</p><p>完成后，打开命令行输入<code>npm install -g hexo-cli</code>，等待安装完成</p><p>新建一个文件夹，在这个文件夹内打开命令行，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>安装完成后你可以找到一个文件叫做<code>_config.yml</code>，按照这里的说明来修改它<br><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">说明</a></p><p>修改完成后请在该文件中修改此处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>仓库地址请在刚刚GitHub仓库创建成功页面查找</p><p>你还需要安装一个插件<br><code>npm install hexo-deployer-git --save</code></p><p>输入<code>hexo d</code>来部署你的博客到GitHub，也可以使用<code>hexo s</code>开启本地测试服务器</p><p>部署时可能要求你输入GitHub的用户名和密码，输入即可</p><h2 id="配置GitHub-pages"><a href="#配置GitHub-pages" class="headerlink" title="配置GitHub pages"></a>配置GitHub pages</h2><p>在刚刚的仓库设置界面找到如图配置，由于我已经配置完成，这里只有配置完成后的图片<br><img src="/" alt="" class="lazyload" data-src="https://s2.ax1x.com/2019/11/25/Mv5QcF.png"></p><p>你的最终效果应该也是这样的</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>看到那个链接了吗，点击它访问你的博客，当然你也可以将链接分享给其他人</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>输入<code>hexo new &quot;文章名称&quot;</code></p><p>文章的md文件将会在<code>source/_posts</code></p><p>打开它!开始写吧！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/25/hello-world/"/>
      <url>/2019/11/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
